<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="postfix" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Postfix</title>

  <para>The time has finally come to install
  <application>Postfix</application>.</para>

  <programlisting>apt-get install postfix</programlisting>

  <para>During installation Postfix will ask you to choose the type of
  installation and a domain.</para>

  <para>Choose <computeroutput>Internet site</computeroutput> and enter your
  servers name <computeroutput><systemitem
  class="fqdomainname">atlantis.example.com</systemitem></computeroutput>. It
  is important that your server name is not just <systemitem
  class="domainname">example.com</systemitem>.</para>

  <para>After installation finishes we can check if Postfix is runing by
  connecting to port 25 on your localhost with telnet:</para>

  <screen># <command>telnet</command> localhost 25
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 atlantis.example.com ESMTP Postfix (Debian/GNU)</screen>

  <para>Type <command>quit</command> to exit.</para>

  <para>If you see Postfix responding, Postfix is working. For another check
  we can try to send email to one of your email accounts that are located on
  another server:</para>

  <screen xml:id="postfix.test-email-sending">atlantis:~# <command>mail</command> your-other-email@somedomain.com
Subject: test email from example.com
test body of the email.
.
Cc:</screen>

  <para>The single dot on the line is a sign that your are done with the
  emails body.</para>

  <para>You should be getting this email message on the account you
  specified.</para>

  <para>Check that you have your <systemitem
  class="domainname">example.com</systemitem> in a file
  <filename>/etc/mailname</filename>.</para>

  <section xml:id="postfix.inital-settings">
    <title>Initial settings</title>

    <note>
      <para>Do not be afraid to play with config files at this stage. If you
      have installed <application>etckeeper</application> <link
      xl:href="#preparation.tracking-changes">as suggested</link>, you can
      always revert to the previous state. Just remember to commit your
      changes every time you change something by running <command>etckeeper
      commit "Descirption of the changes made"</command>. The default Postfix
      configuration files were already commited when we installed
      Postfix.</para>
    </note>

    <para>First we are going to delete the content of the
    <filename>/etc/postfix/main.cf</filename> file so we can fill it with our
    own.</para>

    <programlisting>atlantis:~# <command>cat</command> /dev/null &gt; /etc/postfix/main.cf</programlisting>

    <para>Now copy and paste these lines, but make sure to replace
    <emphasis>myhostname = atlantis.example.com</emphasis> with your
    hostname.</para>

    <screen>##################
# Default settings
##################
biff = no
append_dot_mydomain = no
#delay_warning_time = 4h
readme_directory = no
smtpd_banner = $myhostname ESMTP $mail_name

################
# TLS parameters
################
smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
smtpd_use_tls=yes
smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache

###############
# Main settings
###############
myhostname = <replaceable>atlantis.example.com</replaceable>
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
myorigin = /etc/mailname
mydestination = $mydomain, localhost.$mydomain, localhost
relayhost = 
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
mailbox_size_limit = 0
recipient_delimiter = +
inet_interfaces = all</screen>

    <tip>
      <para>Postfix extracts $mydomain from the value of the
      <varname>myhostname</varname> and strips the part before the first dot,
      including the dot. So in this case <varname>mydomain</varname> is
      <emphasis>example.com</emphasis>.</para>
    </tip>

    <para>If you are not using IPv6 you can remove IPv6 addresses from
    <varname>mynetworks</varname> and leave just <emphasis>mynetworks =
    127.0.0.0/8</emphasis>. We will use the <varname>mynetworks</varname>
    variable to tell Postfix that all computers specified in the my networks
    range can send emails without authentification. We are leaving only the
    localhost here so we make sure that mail originating from the server (like
    outputs of cron jobs and other system messages) do not get blocked by
    other rules we will implement.</para>

    <para>Restart Postfix by running <command>invoke-rc.d postfix
    restart</command> and try to send another test mail to check that we
    didn't mess something up.</para>

    <para>Now it would be a good time to also test if Postfix is receiving
    mails as well. Try sending an email to just <email>root</email> and to
    <email>root@example.com</email> using the <command>mail</command> command
    as described in the <link xl:href="#postfix.test-email-sending">previous
    section</link>. If everything works the received emails should be located
    in <filename>/var/mail/root</filename>. Check that file and make sure that
    you are sending email from the right domain (sender should be
    <email>root@example.com</email>). If you do not receive an email check the
    Postifx log file <email>/var/log/mail.log</email> to see what could have
    gone wrong.</para>
  </section>

  <section xml:id="postfix.virtual-users">
    <title>Virtual users and domains</title>

    <para>Our current setup can only receive mail for for users that exist on
    our server (root, the one that you created druing the installation and
    other system users). As you can see this is not quite helpfull as we could
    only server one domain and all the users that have email addresses on that
    domain would have to be created on the server.</para>

    <para>To avoid all this we are going to use virtual domains and users.
    That means that we are going to create a couple of databases where we will
    store all the domains and users that we will be receiving mail for.</para>

    <para>First, we are going to create a system user which will have
    persmissions to read and write emails to the system as well as the
    directory for storing all of the mail.</para>

    <para>User will be called <systemitem class="username">vmail</systemitem>
    and will have a group with ID 5000 on the system.</para>

    <programlisting><command>groupadd</command> -g 5000 vmail
<command>useradd</command> -s /usr/sbin/nologin -g vmail -u 5000 vmail -d /home/vmail -m</programlisting>

    <para>The extra parameters for the <command>useradd</command> command tell
    the system that this user will not be able to log on to the system, that
    he belongs to group 5000 and that it's home folder is <filename
    class="directory">/home/vmail</filename>. This is the folder where all of
    the received messages will be stored.</para>
  </section>

  <section xml:id="postfix.mysql">
    <title>MySQL</title>

    <para>Install MySQL.</para>

    <programlisting>apt-get install postfix-mysql mysql-server</programlisting>

    <para>We are going to use <application>Postfix Admin</application> for
    managing virtual users and domains. Download latest version of Postfix
    Admin and move the content of the archive to
    <filename>/var/www/postfix</filename>.</para>

    <programlisting>cd /root/src
wget LINK-TO-THE-LATEST-VERSION
tar -xvzf postfixadmin-2.3.2.tar.gz
mv postfixadmin-2.3.2 /var/www/postfix</programlisting>

    <para>Before installing Postfix Admin we must create a database and a user
    to access the database.</para>

    <programlisting>mysql -u root</programlisting>

    <para>If you have a password set use the <command>-p</command>
    flag.</para>

    <para>Once in MySQL:</para>

    <programlisting>CREATE DATABASE mail;
CREATE USER 'mailadmin'@'localhost' IDENTIFIED BY '<userinput>newpassword</userinput>';
GRANT ALL PRIVILEGES ON `mail` . * TO 'mailadmin'@'localhost';
FLUSH PRIVILEGES;</programlisting>

    <para>Of course you need to change the <userinput>newpassword</userinput>
    with your own password. You can exit MySQL by typing
    <command>exit</command>.</para>

    <para>Open <filename>/var/www/postfix/config.inc.php</filename> with nano.
    Set <varname>$CONF['configured']</varname> to <literal>true</literal>,
    choose your setup password, set
    <varname>$CONF['postfix_admin_url']</varname> to
    <literal>http://SERVERS-IP-ADDRESS/postfix</literal> and enter your
    database information and credentials.</para>

    <para>While you are at it, you should also go through all of the other
    options you can set in the config mail.</para>

    <note>
      <para>To use Postfix Admin you must setup PHP and Apache as described
      <link xl:href="#preparation.lamp">here</link>.</para>
    </note>

    <para>Open up
    <literal>http://SERVERS-IP-ADDRESS/postfix/setup.php</literal> in your
    browser and finish the installation. Once logged in into the Postfix Admin
    create a new virtual domain <systemitem
    class="domainname">example.com</systemitem>, and create new user accout
    username@example.com. Use your own domain name here.</para>

    <para>Postifx Admin created MySQL tables for us and now it is time to tell
    Postfix to use this tables to get information about email addresses and
    domains it should serve.</para>

    <para>First we need to create 4 files in the <filename
    class="directory">/etc/postfix</filename> folder.</para>

    <para><filename>/etc/postfix/sql/virtual_alias_maps.cf</filename></para>

    <screen>user = mailadmin
password = newpassword
hosts = 127.0.0.1
dbname = mail
table = alias
select_field = goto
where_field = address</screen>

    <para>/etc/postfix/sql/virtual_domains_maps.cf</para>

    <screen>user = mailadmin
password = newpassword
hosts = 127.0.0.1
dbname = mail
table = domain
select_field = domain
where_field = domain
additional_conditions = and backupmx = '0' and active = '1'</screen>

    <para><filename>/etc/postfix/sql/virtual_mailbox_maps.cf
    </filename></para>

    <screen>user = mailadmin
password = newpassword
hosts = 127.0.0.1
dbname = mail
table = mailbox
query = SELECT CONCAT(domain,'/',SUBSTRING_INDEX(maildir,'@',1),'/') FROM mailbox WHERE username='%s' AND active = 1</screen>

    <para><filename>/etc/postfix/sql/relay_domains_maps.cf</filename></para>

    <screen>user = mailadmin
password = newpassword
hosts = 127.0.0.1
dbname = mail
table = domain
select_field = domain
where_field = domain
additional_conditions = and backupmx = '1'</screen>

    <para>As you can see, these files containt information that Postfix uses
    to fetch data from the database.</para>

    <para>Since these files contain passwords, we need to protect them:</para>

    <programlisting><prompt>root@atlantis:~#</prompt> <command>cd /etc/postfix/sql</command>
<prompt>atlantis:/etc/postfix/sql#</prompt> <command>chgrp postfix *</command>
<prompt>atlantis:/etc/postfix/sql#</prompt> <command>chmod 640 *</command></programlisting>

    <para>Edit <filename>/etc/postfix/main.cf</filename> and at the bottom of
    the file add</para>

    <screen>##################
# Virtual Settings
##################
virtual_mailbox_base = /home/vmail
virtual_transport = virtual
virtual_alias_maps = mysql:/etc/postfix/sql/virtual_alias_maps.cf
virtual_mailbox_domains = mysql:/etc/postfix/sql/virtual_domains_maps.cf
virtual_mailbox_maps = mysql:/etc/postfix/sql/virtual_mailbox_maps.cf
virtual_minimum_uid = 5000
virtual_uid_maps = static:5000
virtual_gid_maps = static:5000

# Domains for which we are a secondary MX
relay_domains = mysql:/etc/postfix/sql/relay_domains_maps.cf</screen>

    <para>You also need to delete everything in the
    <varname>mydestination</varname> directive because every domain that is
    entered in the mydestionation is treated as a “local” domain so the mail
    gets delivered to the local server users and it is located in
    <filename>/var/spool/mail</filename>.</para>

    <para>Restart Postfix.</para>

    <programlisting>invoke-rc.d postfix restart</programlisting>

    <para>Now it's time to check if everything is working as expects. Send a
    test email to the email address you have created using Postfix Admin.
    Check your <filename
    class="directory">/home/vmail/example.com/username</filename> folder.
    There should be 3 folders inside : <filename>cur</filename>,
    <filename>new</filename> and <filename>tmp</filename>. Inside the folder
    <filename>new</filename> you should see your email message. If this didn't
    work, check <filename>/var/log/mail.log</filename> for possible hints on
    what went wrong.</para>

    <note>
      <para>Since our system is now ready to receive email from the outside
      world you can uncomment the line that blocks port 25 in the
      <filename>firewall.sh</filename> script and run the script again.</para>
    </note>
  </section>

  <section xml:id="postfix.sasl">
    <title>Saslauthd</title>

    <para>Since we want to allow users to log in to our mail server so they
    can send emails, we need to configure some kind of protection. First we
    need to make sure users can log in using the same username and password as
    the one they will be using for checking email.</para>

    <para>For this, we are going to use <application>Saslauthd</application>.
    Saslauthd will also use the same database we already created to verify
    user credentials.</para>

    <programlisting>apt-get install libsasl2-2 libsasl2-modules libsasl2-modules-sql sasl2-bin libpam-mysql</programlisting>

    <para>Open <filename>/etc/default/saslauthd</filename> with nano and
    change <computeroutput>START=no</computeroutput> to
    <computeroutput>START=yes</computeroutput>. At the end of the file we need
    to change <computeroutput>OPTIONS=”-c -m
    /var/run/saslauthd”</computeroutput> to</para>

    <programlisting>OPTIONS="-c -r -m /var/spool/postfix/var/run/saslauthd"</programlisting>

    <para>This change needs to be made because Postfix on Debian is run under
    chroot so it needs access to saslauthd socket and adding of
    <computeroutput>-r</computeroutput> parameter is needed because otherwise
    username is not passed correctly from Postfix to saslauthd.</para>

    <para>We also need to create this directory</para>

    <programlisting>mkdir -p /var/spool/postfix/var/run/saslauthd</programlisting>

    <para>and one symbolic link (because Postfix on Debian is running from a
    chrooted environment and other applications you maybe using on your server
    (including testsaslauthd for testing if saslauthd is working correctly)
    are not aware of us changing the saslauthd directory).</para>

    <programlisting>rm -rf /var/run/saslauthd
ln -s /var/spool/postfix/var/run/saslauthd /var/run/saslauthd</programlisting>

    <warning>
      <para>If you do not delete <filename>/var/run/saslauthd</filename>
      before creating a symbolic link the link will we created in
      <filename>/var/run/saslauthd/saslauthd</filename> and testing SASL with
      <application>testsaslauthd</application> will result in an error:
      "<computeroutput>connect() : No such file or directory
      0</computeroutput>".</para>
    </warning>

    <para>We also need to create two more files:</para>

    <programlisting>nano /etc/pam.d/smtp</programlisting>

    <screen>auth    required   pam_mysql.so user=mailadmin passwd=newpassword host=127.0.0.1 db=mail table=mailbox usercolumn=username passwdcolumn=password crypt=1
account sufficient pam_mysql.so user=mailadmin passwd=newpassword host=127.0.0.1 db=mail table=mailbox usercolumn=username passwdcolumn=password crypt=1</screen>

    <programlisting>nano /etc/postfix/sasl/smtpd.conf</programlisting>

    <screen>pwcheck_method: saslauthd
mech_list: plain login
allow_plaintext: true</screen>

    <para>We need to add Postfix to the sasl group so it can access the
    saslauthd process we just created:</para>

    <programlisting>adduser postfix sasl</programlisting>

    <para>Restart Postfix and sasl</para>

    <screen>/etc/init.d/postfix restart
/etc/init.d/saslauthd restart</screen>

    <para>Now, we can check is saslauthd is working correctly.</para>

    <programlisting>testsaslauthd -s smtp -u root@example.com -p newpassword</programlisting>

    <para>Ofcourse use your own credentials here. Authentification should
    work.</para>

    <screen>atlantis:~# testsaslauthd -s smtp -u root@example.com -p newpassword
0: OK "Success."</screen>

    <para>If you do not get “Success.” as a response, check that you have a
    symbolic link in <filename>/var/run/</filename> named
    <filename>saslauthd</filename> and that it points to
    <filename>/var/spool/postfix/var/run/saslautdh</filename>.</para>

    <para>We have to change permissions to these two files as well:</para>

    <programlisting>chgrp sasl /etc/pam.d/smtp
chmod 640 /etc/pam.d/smtp
chgrp postfix /etc/postfix/sasl/smtpd.conf
chmod 640 /etc/postfix/sasl/smtpd.conf</programlisting>

    <para>We also need to tell Postfix to allow authenticated users to send
    mail. Edit <filename>/etc/postfix/main.cf</filename> and add</para>

    <screen>smtpd_sender_restrictions =
    permit_mynetworks
    permit_sasl_authenticated
    permit_tls_clientcerts</screen>

    <para>Restart Postfix and sasl.</para>

    <programlisting>/etc/init.d/postfix restart
/etc/init.d/saslauthd restart</programlisting>
  </section>

  <section xml:id="postfix.acl">
    <title>Preventing unwanted access</title>

    <para>To make sure our mail server is not used as an open relay, we will
    also add <computeroutput>smtpd_recipient_restrictions</computeroutput> to
    <filename>main.cf</filename>:</para>

    <screen>smtpd_recipient_restrictions =
    permit_mynetworks
    permit_sasl_authenticated 
    reject_unauth_destination
    reject_unlisted_recipient
    reject_unverified_recipient</screen>

    <para>You need to restart Postfix once again. After setting this up you
    should <link xl:href="http://www.mailradar.com/openrelay/">check if your
    mail server can be used as an open relay</link>. If you have installed
    OSSEC for intrusion detection don't worry if the test don't finish because
    OSSECs active response blocks hosts that try to abuse your server (like
    the open relay test tool).</para>
  </section>

  <section xml:id="postfix.tls">
    <title>TLS</title>

    <para>Now, we are going to configure Postfix to use TLS. If you still
    haven't created a <link xl:href="#security.certificates">self signed
    certificates do it now</link>.</para>

    <programlisting>apt-get install postfix-tls</programlisting>

    <para>Edit <filename>/etc/postfix/main.cf</filename> and look for the part
    containing</para>

    <screen>smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
smtpd_use_tls=yes
smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache</screen>

    <para>and replace it with</para>

    <screen>smtpd_sasl_auth_enable = yes
broken_sasl_auth_clients = yes
smtpd_sasl_authenticated_header = yes
smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination
smtpd_use_tls = yes
smtpd_tls_cert_file = /etc/ssl/self-signed/server.pem
smtpd_tls_key_file = $smtpd_tls_cert_file</screen>

    <para>We are telling Postfix that we want to allow sending emails without
    authentication for our networks (localhost) and for users that
    authenticated using sasl we configured previously.</para>

    <para>Restart Postfix and try to send an email using your email client
    from your workstation. You will not be able to read emails yet. Just make
    sure that username you are using is your full email address, that you've
    selected to use authentication for your SMTP server and that TLS is
    selected.</para>
  </section>

  <section>
    <title>Submission port</title>

    <para>Many ISPs today block port 25 for users. To be able to send email
    using our Postfix mail server as our outgoing server, we need to enable
    submission port (port 587) in Postfix and change the firewall rules to
    allow traffic to port 587.</para>

    <para>Open <filename>/etc/postfix/master.cf</filename> and uncomment the
    folloging lines:</para>

    <screen>submission inet n       -       -       -       -       smtpd
  -o smtpd_tls_security_level=encrypt
  -o smtpd_sasl_auth_enable=yes
  -o smtpd_client_restrictions=permit_sasl_authenticated,reject
  -o milter_macro_daemon_name=ORIGINATING</screen>

    <note>
      <para>Spaces in the lines after the first line are important. Do not
      delete them!</para>
    </note>
  </section>

  <section>
    <title>Blocking certain attachments</title>

    <para>To block certain extensions of attachments (.exe, .bat, …) edit
    <filename>/etc/postfix/main.cf</filename> and add</para>

    <screen>mime_header_checks = regexp:/etc/postfix/mime_header_checks</screen>

    <para>Create <filename>/etc/postfix/mime_header_checks</filename> and
    insert</para>

    <screen>/name=[^&gt;]*\.(bat|com|exe|dll|vbs)$/ REJECT</screen>

    <para>This will block all emails containg attachments that and in bat,
    com, exe, dll and vbs. Feel free to add other extension if you
    want.</para>
  </section>

  <section>
    <title>Maximum message size</title>

    <para>Default maximum size of the message is 10240000 bytes (10 MB), to
    change this to 20MB edit <filename>/etc/postfix/main.cf</filename> and
    add</para>

    <screen>message_size_limit = 20480000</screen>
  </section>

  <section>
    <title>Commit your changes</title>

    <para>If you are using etckeeper now is a good time to commit the changes
    you made.</para>

    <programlisting>etckeeper commit "Configured Postfix"</programlisting>
  </section>

  <section>
    <title>Important commands</title>

    <itemizedlist>
      <listitem>
        <para><command>postconf mail_version</command> - Find out what Postfix
        Version is installed</para>
      </listitem>

      <listitem>
        <para><command>mailq</command> - Show Mail Queue</para>
      </listitem>

      <listitem>
        <para><command>postsuper -d ALL</command> - Remove bounced mail from
        the queue</para>
      </listitem>

      <listitem>
        <para><command>postfix flush</command> - Flush the Mail Queue</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para><command>postfix check</command> - Check Installation</para>
      </listitem>
    </itemizedlist>
  </section>
</section>
