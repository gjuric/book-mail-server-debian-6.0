<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="antispam" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Fighting spam</title>

  <para>Amavisd-new is a program that receives mail from Postfix, passes it
  through SpamAssassin and ClamAV and based on the user (or global) settings
  decides if the mail should be flagged as a spam, deleted or delivered as a
  legitimate mail.</para>

  <para>We are going to install all of the packages at once.</para>

  <programlisting>apt-get install amavisd-new spamassassin clamav-daemon</programlisting>

  <section xml:id="antispam.clamav">
    <title>ClamAV</title>

    <para>ClamAV needs some utilities that are not provided in the mail Debian
    repository. This utillities will be used to extract email attachments so
    the content of the archives can be scanned for potential viruses.</para>

    <para>Because of this utillites we need to add
    <emphasis>contrib</emphasis> and <emphasis>non-free</emphasis>
    repositories to the <filename>/etc/apt/sources.list</filename>. To do this
    you have to append ”<computeroutput>contrib non-free</computeroutput>” on
    every line that starts with deb, and ends with main. Your
    <filename>/etc/apt/sources.list</filename> file should look like
    this:</para>

    <screen>deb http://ftp2.de.debian.org/debian/ squeeze main contrib non-free
deb-src http://ftp2.de.debian.org/debian/ squeeze main

deb http://security.debian.org/ squeeze/updates main contrib non-free
deb-src http://security.debian.org/ squeeze/updates main

deb http://ftp2.de.debian.org/debian/ squeeze-updates main contrib non-free
deb-src http://ftp2.de.debian.org/debian/ squeeze-updates main</screen>

    <para>After editing <filename>/etc/apt/sources.list</filename> commit the
    changes you made to <filename>sources.list</filename> with etckeeper. Now
    we need to update the apt database. While we are at it we can also check
    if there are any packages that should be updated.</para>

    <programlisting>apt-get update
apt-get upgrade</programlisting>

    <para>Now we are ready to install utilities for decompression of
    archives.</para>

    <programlisting>apt-get install arj bzip2 cabextract cpio file gzip lha nomarch pax rar unrar unzip zip zoo</programlisting>

    <para>Add clamav user to the amavis group and vice versa in order for
    Clamav to have access to scan files:</para>

    <programlisting>adduser clamav amavis
adduser amavis clamav</programlisting>

    <para>Restart amavis and clamav-daemon.</para>

    <programlisting>/etc/init.d/clamav-daemon restart
/etc/init.d/amavis restart</programlisting>
  </section>

  <section xml:id="antispam.spamassassin">
    <title>SpamAssassin</title>

    <para>Both SpamAssassin and amavisd-new are Perl programs, and amavisd-new
    includes SpamaAssassins libraries so it doesn't need SpamAssassin daemon
    running on the server. We are going to turn off the daemon and prevent it
    from starting up during boot.</para>

    <programlisting>/etc/init.d/spamassassin stop
update-rc.d -f spamassassin remove
etckeeper commit "Removed spamassassin from rcX.d"</programlisting>

    <para>To enable DKIM checking of received emails in SpamAssassin one has
    to install Mail::DKIM Perl library.</para>

    <programlisting>apt-get install libmail-dkim-perl</programlisting>

    <para>Edit <filename>/etc/spamassassin/v312.pre</filename> and check that
    this line is uncommented:</para>

    <screen>loadplugin Mail::SpamAssassin::Plugin::DKIM</screen>

    <para>We are also going to install Pyzor and Razor for additional
    checks.</para>

    <programlisting>apt-get install pyzor razor</programlisting>

    <para>After that you can try running SpamAssassing manually:</para>

    <programlisting>spamassassin -D -t &lt; /usr/share/doc/spamassassin/examples/sample-spam.txt 2&gt;&amp;1 | tee sa.out</programlisting>

    <para>You should see DKIM mentioned in the sa.out file, and the end of the
    output should look something like this:</para>

    <screen>Content analysis details:   (1004.5 points, 5.0 required)

 pts rule name              description
---- ---------------------- --------------------------------------------------
-0.0 NO_RELAYS              Informational: message was not relayed via SMTP
1000 GTUBE                  BODY: Generic Test for Unsolicited Bulk Email
 0.4 RAZOR2_CF_RANGE_51_100 Razor2 gives confidence level above 50%
                            [cf: 100]
 0.5 RAZOR2_CF_RANGE_E4_51_100 Razor2 gives engine 4 confidence level
                            above 50%
                            [cf: 100]
 1.7 RAZOR2_CHECK           Listed in Razor2 (http://razor.sf.net/)
 2.0 PYZOR_CHECK            Listed in Pyzor (http://pyzor.sf.net/)
 0.0 DIGEST_MULTIPLE        Message hits more than one network digest check
-0.0 NO_RECEIVED            Informational: message has no Received headers</screen>

    <para>To enable AWL edit <filename>/etc/spamassassin/v310.pre</filename>
    and uncomment:</para>

    <screen>loadplugin Mail::SpamAssassin::Plugin::AWL</screen>

    <para>Edit /etc/spamassassin/local.cf and add:</para>

    <screen>use_auto_whitelist 1</screen>

    <section xml:id="antispam.spamassassin.training">
      <title>Training SpamAssassin</title>

      <para>Bayes filtering is a strong weapon for fighting spam. It works by
      learning what is spam to you and what isn't. For SpamAssassing to start
      using Bayes filtering you have to train it first. Training your Bayes
      filters is something that you should do on a regular basis. The more
      emails it process the smarter it gets.</para>

      <para>To learn SpamAssassin what is spam, you have to use the sa-learn
      utillity on a folder where your spam messages are stored (in my case the
      folder is called <filename>Junk</filename>).</para>

      <para>Because SpamAssassin is run by amavisd-new you have to run the
      sa-learn utility as the amavis user.</para>

      <programlisting>su amavis sa-learn --no-sync --spam /home/vmail/example.com/demo/.Junk/cur</programlisting>

      <para>To learn what is not spam run sa-learn in the folder that only
      contains your non-spam mail (in this case, sa-learn examines the
      <filename>Inbox</filename> folder).</para>

      <programlisting>su amavis sa-learn --no-sync --ham /home/vmail/example.com/demo/cur</programlisting>

      <para>Bayes filtering will be used once you train SpamAssassin on more
      than 200 spam <emphasis>and</emphasis> ham messages.</para>

      <para>To update SpamAssassin you can run:</para>

      <programlisting>sa-update -D</programlisting>

      <para><computeroutput>-D</computeroutput> is for debug.</para>
    </section>

    <section xml:id="antispam.spamassassin.bayes-mysql">
      <title>Move Bayes and AWL data to MySQL</title>

      <para>Enter mysql and create database table and user for
      SpamAssassin.</para>

      <screen>CREATE DATABASE mail_spamassassin;
CREATE USER 'spamassassin'@'localhost' IDENTIFIED BY 'new_password';
GRANT ALL PRIVILEGES ON `mail_spamassassin` . * TO 'spamassassin'@'localhost';
FLUSH PRIVILEGES;</screen>

      <para>Usw wget to download scripts that we will need from
      http://spamassassin.apache.org/full/3.0.x/dist/tools/.</para>

      <programlisting>cd /root
wget http://spamassassin.apache.org/full/3.0.x/dist/tools/convert_awl_dbm_to_sql
</programlisting>

      <para>To create the tables in MySQL run:</para>

      <programlisting>mysql -u root -p mail_spamassassin &lt; /usr/share/doc/spamassassin/sql/bayes_mysql.sql
mysql -u root -p mail_spamassassin &lt; /usr/share/doc/spamassassin/sql/awl_mysql.sql</programlisting>

      <para>Edit /etc/spamassassin/local.cf and add this at the end:</para>

      <screen>bayes_store_module              Mail::SpamAssassin::BayesStore::MySQL   
 
bayes_sql_dsn                   DBI:mysql:mail_spamassassin:localhost
bayes_sql_username              spamassassin
bayes_sql_password              new_password
bayes_sql_override_username     amavis

auto_whitelist_factory          Mail::SpamAssassin::SQLBasedAddrList
user_awl_dsn                    DBI:mysql:mail_spamassassin:localhost
user_awl_sql_username           spamassassin
user_awl_sql_password           new_password</screen>

      <para>Now we need to initialise the database table:</para>

      <programlisting>su amavis -c 'sa-learn --spam /usr/share/doc/spamassassin/examples/sample-spam.txt'</programlisting>

      <para>If you are starting clean and do not have existing Bayes data you
      can skip importing of existing data into the database.</para>

      <para>Move to the amavis users home folder and dump the existing
      data:</para>

      <programlisting>cd /var/lib/amavis/.spamassassin
su amavis -c 'sa-learn --sync --force-expire
su amavis -c 'sa-learn --backup &gt; /root/backup.txt</programlisting>

      <para>To convert the AWL data:</para>

      <programlisting>cd /root
chmod +x convert_awl_dbm_to_sql
./convert_awl_dbm_to_sql </programlisting>

      <para>To run the actuall convert copy this line and replace your
      password and other data you might have modified:</para>

      <programlisting>./convert_awl_dbm_to_sql --username amavis --dsn DBI:mysql:mail_spamassassin:localhost --dbautowhitelist /var/lib/amavis/.spamassassin/auto-whitelist --sqlusername spamassassin --sqlpassword new_password --ok </programlisting>

      <para>To insert the Bayes data run:</para>

      <programlisting>su amavis -c 'sa-learn --restore backup.txt'</programlisting>

      <para>The existing data should be inserted into MySQL.</para>

      <para>Restart amavisd-new and commit the changes made.</para>

      <programlisting>/etc/init.d/amavis restart
etckeeper commit "Moved Bayes and AWL data to MySQL"</programlisting>

      <para>If you have enough Bayes and AWL data you can test SpamAssassin
      like this:</para>

      <screen>atlantis:~# su amavis -c "spamassassin -D -t &lt; /usr/share/doc/spamassassin/examples/sample-spam.txt 2&gt;&amp;1 | egrep '(bayes:|whitelist:|AWL)'" 
[26387] dbg: plugin: loading Mail::SpamAssassin::Plugin::AWL from @INC
[26387] dbg: bayes: using username: amavis
[26387] dbg: bayes: database connection established
[26387] dbg: bayes: found bayes db version 3
[26387] dbg: bayes: Using userid: 1
[26387] dbg: bayes: corpus size: nspam = 27443, nham = 7248
[26387] dbg: bayes: tok_get_all: token count: 65
[26387] dbg: bayes: score = 0.25382662007679
[26387] dbg: bayes: DB expiry: tokens in DB: 116828, Expiry max size: 150000, Oldest atime: 1287200200, Newest atime: 1298305866, Last expire: 1298265907, Current time: 1298310696
[26387] dbg: auto-whitelist: sql-based connected to DBI:mysql:mail_spamassassin:localhost
[26387] dbg: auto-whitelist: sql-based using username: amavis
[26387] dbg: auto-whitelist: sql-based get_addr_entry: no entry found for sender@example.net|ip=none
[26387] dbg: auto-whitelist: sql-based sender@example.net|ip=none scores 0/0
[26387] dbg: auto-whitelist: AWL active, pre-score: 1006.014, autolearn score: 6.014, mean: undef, IP: undef
[26387] dbg: auto-whitelist: sql-based add_score: created new entry for sender@example.net|ip=none with totscore: 6.014
[26387] dbg: auto-whitelist: sql-based finish: disconnected from DBI:mysql:spamassassin:localhost
[26387] dbg: auto-whitelist: post auto-whitelist score: 1006.014</screen>

      <warning>
        <para>Some of the data from the database should be pruned regularly.
        For more information on how to create scripts that will automatically
        prune your database from stale records take a <link
        xl:href="http://www200.pair.com/mecham/spam/debian-spamassassin-sql.html">look
        here</link>.</para>
      </warning>
    </section>
  </section>

  <section xml:id="antispam.amavis">
    <title>Amavisd-new</title>

    <para>Edit <filename>/etc/amavis/conf.d/15-content_filter_mode</filename>
    and ucomment antivirus and spam checking</para>

    <screen>use strict;

# You can modify this file to re-enable SPAM checking through spamassassin
# and to re-enable antivirus checking.

#
# Default antivirus checking mode
# Uncomment the two lines below to enable it back
#

@bypass_virus_checks_maps = (
   \%bypass_virus_checks, \@bypass_virus_checks_acl, \$bypass_virus_checks_re);


#
# Default SPAM checking mode
# Uncomment the two lines below to enable it back
#

@bypass_spam_checks_maps = (
   \%bypass_spam_checks, \@bypass_spam_checks_acl, \$bypass_spam_checks_re);

1;  # ensure a defined return
</screen>

    <para>To integrate Amavis with Postfix we need to add a content_filter in
    <filename>/etc/postfix/main.cf</filename>.</para>

    <programlisting>content_filter = smtp-amavis:[127.0.0.1]:10024</programlisting>

    <para>Open <filename>/etc/postfix/master.cf</filename> and add this at the
    end of the file:</para>

    <screen>smtp-amavis     unix    -       -       -       -       2       smtp
        -o smtp_data_done_timeout=1200
        -o smtp_send_xforward_command=yes
        -o disable_dns_lookups=yes
        -o max_use=20

127.0.0.1:10025 inet    n       -       -       -       -       smtpd
        -o content_filter=
        -o local_recipient_maps=
        -o relay_recipient_maps=
        -o smtpd_restriction_classes=
        -o smtpd_delay_reject=no
        -o smtpd_client_restrictions=permit_mynetworks,reject
        -o smtpd_helo_restrictions=
        -o smtpd_sender_restrictions=
        -o smtpd_recipient_restrictions=permit_mynetworks,reject
        -o smtpd_data_restrictions=reject_unauth_pipelining
        -o smtpd_end_of_data_restrictions=
        -o mynetworks=127.0.0.0/8
        -o smtpd_error_sleep_time=0
        -o smtpd_soft_error_limit=1001
        -o smtpd_hard_error_limit=1000
        -o smtpd_client_connection_count_limit=0
        -o smtpd_client_connection_rate_limit=0
        -o receive_override_options=no_header_body_checks,no_unknown_recipient_checks</screen>

    <para>and add this immediately below the “pickup” transport
    service:</para>

    <screen>         -o content_filter=
         -o receive_override_options=no_header_body_checks</screen>

    <para>This will prevent messages that are generated to report on spam from
    being classified as spam.</para>

    <para>Amavisd-new listens on port 1024 where Postfix sends all of the mail
    coming into the server. After processing the email amavisd-new returns the
    mail to Postfix on port 1025 for final delivery.</para>

    <para>Edit <filename>/etc/amavis/conf.d/50-user</filename> and paste this
    into the file:</para>

    <screen>use strict;

@local_domains_acl = ( ".$mydomain" );

$sa_spam_subject_tag = 'SPAM &gt; ';
$sa_tag_level_deflt  = -999;  # add spam info headers if at, or above that level
$sa_tag2_level_deflt = 5; # add 'spam detected' headers at that level
$sa_kill_level_deflt = 12; # triggers spam evasive actions

$final_virus_destiny      = D_DISCARD;  # (data not lost, see virus quarantine)
$final_banned_destiny     = D_REJECT;   # D_REJECT when front-end MTA
$final_spam_destiny       = D_DISCARD;
$final_bad_header_destiny = D_PASS;     # False-positive prone (for spam)

#------------ Do not modify anything below this line -------------
1;  # ensure a defined return
</screen>

    <para>Of course, you do not just want to paste stuff into configuration
    files without knowing what are you actually doing. So let us go through
    the file, line by line:</para>

    <screen>@local_domains_acl = ( ".$mydomain" );</screen>

    <para>This is a list of domains for which this server considers itself as
    a final destination. If you do not add all your domains here, they will
    not be processed by amavis, so if you have more domains on your server,
    except for the default line, this should look something like this:</para>

    <screen>@local_domains_acl = ( ".$mydomain", "domain2.com", "domain3.org" );</screen>

    <para>Later, we will see how we can automate this to read the information
    from the database.</para>

    <screen>$sa_spam_subject_tag = 'SPAM &gt; ';
$sa_tag_level_deflt  = -999;  # add spam info headers if at, or above that level
$sa_tag2_level_deflt = 5; # add 'spam detected' headers at that level
$sa_kill_level_deflt = 12; # triggers spam evasive actions</screen>

    <para>When SpamAssassin processes message, it gives them a score
    identifying what is the probability of message being a spam.
    <computeroutput>$sa_tag_level_deflt</computeroutput> tells amavis that ig
    the score is greater or equal to this level that amavis should append
    X-Spam headers to the message. The score of -999 means that we want to
    apply <computeroutput>X-Spam</computeroutput> header to all of our
    messages, so it is easier for us to see why is, or why is not, a message
    considered spam by examining the headers of the message.</para>

    <para><computeroutput>$sa_tag2_level_deflt = 5;</computeroutput> is the
    spam level the message needs to reach for amavis to apply the header
    <computeroutput>X-Spam-Flag: YES</computeroutput> so we (our mail client)
    knows that this message is considered to be spam. At this level the
    message subject is prefixed with the value of the variable
    <computeroutput>$sa_spam_subject_tag</computeroutput>. In this case the
    subject is prefixed with “<computeroutput>SPAM &gt;
    </computeroutput>”.</para>

    <para><computeroutput>$sa_kill_level_deflt</computeroutput> holds the
    value of the spam level that message needs to reach to do something with
    the message. What we are going to do with messages that are spam depends
    of the value of <computeroutput>$final_spam_destiny
    variable</computeroutput>. In this case we are discarding this
    messages.</para>

    <para>This means that the message is not going to reach to recipients
    mailbox at all. But that does not mean that the message is lost. Spam
    messages that are discarded can still be fetched from the system. Default
    configuration is to store them in the
    <filename>/var/lib/amavis/virusmails</filename> folder. It is possible to
    store them in the database.</para>

    <para>For releasing quarantined mail you need to add these lines:</para>

    <screen>$inet_socket_port = [10024,9998];
$interface_policy{'9998'} = 'AM.PDP-INET';
$policy_bank{'AM.PDP-INET'} = {
  protocol =&gt; 'AM.PDP',  # select Amavis policy delegation protocol
  inet_acl =&gt; [qw( 127.0.0.1 [::1] )],  # restrict access to these IP addresses
# auth_required_release =&gt; 0,  # don't require secret_id for amavisd-release
};</screen>

    <para>If you want to store everything in the database you have to add
    these lines as well:</para>

    <screen>@lookup_sql_dsn =  ( ['DBI:mysql:database=DATABASE-NAME;host=127.0.0.1;port=3306', 'USERNAME', 'PASSWORD']);
@storage_sql_dsn = @lookup_sql_dsn;

$virus_quarantine_method = 'sql:';
$spam_quarantine_method = 'sql:';
$banned_files_quarantine_method = 'sql:';
$bad_header_quarantine_method = 'sql:';</screen>

    <para>For this to work, you will have to create the database in MySQL and
    change the value of <computeroutput>@lookup_sql_dsn</computeroutput>
    variable to match your database, username &amp; password. You will have to
    create the tables for this database by looking at the amavis
    documentation). When you set this all up, you can use
    <application>Mailzu</application> or <application>Postvis
    Admin</application> to retrieve the quarantined messages. For users of
    <application>SquirrelMail</application> webmail system, there as a plugin
    called <application>AmavisNewSQL</application> which enables access for
    users to quarantined messages that were addressed to them.</para>

    <note>
      <para>Quarantined messages (on the file system, or in the database) have
      to be deleted periodically!</para>
    </note>

    <para>If you do not want to quarantine any of the messages, change</para>

    <screen>$virus_quarantine_method = 'sql:';
$spam_quarantine_method = 'sql:';
$banned_files_quarantine_method = 'sql:';
$bad_header_quarantine_method = 'sql:';</screen>

    <para>to</para>

    <screen>$virus_quarantine_method = undef;
$spam_quarantine_method = undef;
$banned_files_quarantine_method = undef;
$bad_header_quarantine_method = undef;</screen>

    <para>SQL support for amavis, except for easier access to quarantined
    messages also provides features to change spam setting on a per user
    basis. Once you create the database, and configure
    <computeroutput>@lookup_sql_dsn</computeroutput> this part is very easy
    achieved by reading through the amavis documentation.</para>

    <para>Messages that have a spam value between
    <computeroutput>$sa_tag2_level_deflt</computeroutput> and
    <computeroutput>$sa_kill_level_deflt</computeroutput> are delivered into
    the recipients mailbox and marked with “<computeroutput>SPAM
    &gt;</computeroutput>” in the subject and have the
    <computeroutput>X-Spam-Flag: YES</computeroutput> header added to them.
    Although this may be enough for you, since I use only IMAP access to the
    mailboxes I wanted to move this messages to the <filename>Junk</filename>
    folder inside the users mailbox automatically. This has some benefits:
    Inbox will not be filled with spam messages, but in case of a false
    positive, user could check his Junk folder to check for messages marked as
    spam. This folder can also be used for learning SpamAssassing what is
    spam, and if users move the messages that are not recognized as spam to
    this folder instead of deleting them SpamAssassin will get smarter about
    what is considered to be spam, and what is not.</para>

    <para>It's time to restart Postfix and Amavis and commit changes using
    etckeeper.</para>

    <programlisting>/etc/init.d/postfix restart
/etc/init.d/amavis restart
etckeeper commit "Configured amavisd-new"</programlisting>

    <section xml:id="antispam.amavis.mysql">
      <title>Store configuration in a database</title>

      <para>Documents regarding the use of amavisd-new with an SQL server are
      located in <filename
      class="directory">/usr/share/doc/amavisd-new</filename>. Use
      <application>gunzip</application> to uncompress the files ending with
      .gz.</para>

      <para>When amavisd-new works with an SQL server it can use two sets of
      tables. The first part is read only and has the following tables: users,
      mailaddr, wblist and policy. The second part is read/write and is used
      when you store quarantined emails into the SQL. The tables in the second
      part are: maddr, msgs, msgrcpt, quarantine.</para>

      <para>We are going to setup both sets of tables in the same database
      named mail_amavis. Enter mysql and run:</para>

      <screen>CREATE DATABASE mail_amavis;
CREATE USER 'amavis'@'localhost' IDENTIFIED BY 'new_password';
GRANT ALL PRIVILEGES ON `mail_amavis` . * TO 'amavis'@'localhost';
FLUSH PRIVILEGES;</screen>

      <para>Create an <filename>amavis.sql</filename> file and paste this into
      it:</para>

      <programlisting role="sql">-- local users
CREATE TABLE users (
  id         int unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,  -- unique id
  priority   integer      NOT NULL DEFAULT '7',  -- sort field, 0 is low prior.
  policy_id  integer unsigned NOT NULL DEFAULT '1',  -- JOINs with policy.id
  email      varbinary(255) NOT NULL UNIQUE,
  fullname   varchar(255) DEFAULT NULL,    -- not used by amavisd-new
  local      char(1)      -- Y/N  (optional field, see note further down)
);

-- any e-mail address (non- rfc2822-quoted), external or local,
-- used as senders in wblist
CREATE TABLE mailaddr (
  id         int unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,
  priority   integer      NOT NULL DEFAULT '7',  -- 0 is low priority
  email      varbinary(255) NOT NULL UNIQUE
);

-- per-recipient whitelist and/or blacklist,
-- puts sender and recipient in relation wb  (white or blacklisted sender)
CREATE TABLE wblist (
  rid        integer unsigned NOT NULL,  -- recipient: users.id
  sid        integer unsigned NOT NULL,  -- sender: mailaddr.id
  wb         varchar(10)  NOT NULL,  -- W or Y / B or N / space=neutral / score
  PRIMARY KEY (rid,sid)
);

CREATE TABLE policy (
  id  int unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,
                                    -- 'id' this is the _only_ required field
  policy_name      varchar(32),     -- not used by amavisd-new, a comment

  virus_lover          char(1) default NULL,     -- Y/N
  spam_lover           char(1) default NULL,     -- Y/N
  banned_files_lover   char(1) default NULL,     -- Y/N
  bad_header_lover     char(1) default NULL,     -- Y/N

  bypass_virus_checks  char(1) default NULL,     -- Y/N
  bypass_spam_checks   char(1) default NULL,     -- Y/N
  bypass_banned_checks char(1) default NULL,     -- Y/N
  bypass_header_checks char(1) default NULL,     -- Y/N

  spam_modifies_subj   char(1) default NULL,     -- Y/N

  virus_quarantine_to      varchar(64) default NULL,
  spam_quarantine_to       varchar(64) default NULL,
  banned_quarantine_to     varchar(64) default NULL,
  bad_header_quarantine_to varchar(64) default NULL,
  clean_quarantine_to      varchar(64) default NULL,
  other_quarantine_to      varchar(64) default NULL,

  spam_tag_level  float default NULL, -- higher score inserts spam info headers
  spam_tag2_level float default NULL, -- inserts 'declared spam' header fields
  spam_kill_level float default NULL, -- higher score triggers evasive actions
                                      -- e.g. reject/drop, quarantine, ...
                                     -- (subject to final_spam_destiny setting)
  spam_dsn_cutoff_level        float default NULL,
  spam_quarantine_cutoff_level float default NULL,

  addr_extension_virus      varchar(64) default NULL,
  addr_extension_spam       varchar(64) default NULL,
  addr_extension_banned     varchar(64) default NULL,
  addr_extension_bad_header varchar(64) default NULL,

  warnvirusrecip      char(1)     default NULL, -- Y/N
  warnbannedrecip     char(1)     default NULL, -- Y/N
  warnbadhrecip       char(1)     default NULL, -- Y/N
  newvirus_admin      varchar(64) default NULL,
  virus_admin         varchar(64) default NULL,
  banned_admin        varchar(64) default NULL,
  bad_header_admin    varchar(64) default NULL,
  spam_admin          varchar(64) default NULL,
  spam_subject_tag    varchar(64) default NULL,
  spam_subject_tag2   varchar(64) default NULL,
  message_size_limit  integer     default NULL, -- max size in bytes, 0 disable
  banned_rulenames    varchar(64) default NULL  -- comma-separated list of ...
        -- names mapped through %banned_rules to actual banned_filename tables
);

-- R/W part of the dataset (optional)
--   May reside in the same or in a separate database as lookups database;
--   REQUIRES SUPPORT FOR TRANSACTIONS; specified in @storage_sql_dsn
--
--  Wayne Smith adds: When using MySQL with InnoDB one might want to
--  increase buffer size for both pool and log, and might also want
--  to change flush settings for a little better performance. Example:
--    innodb_buffer_pool_size = 384M
--    innodb_log_buffer_size = 8M
--    innodb_flush_log_at_trx_commit = 0
--  The big performance increase is the first two, the third just helps with
--  lowering disk activity. Consider also adjusting the key_buffer_size.

-- provide unique id for each e-mail address, avoids storing copies
CREATE TABLE maddr (
  partition_tag integer   DEFAULT 0,   -- see $sql_partition_tag
  id         bigint unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,
  email      varbinary(255) NOT NULL,  -- full mail address
  domain     varchar(255)   NOT NULL,  -- only domain part of the email address
                                       -- with subdomain fields in reverse
  CONSTRAINT part_email UNIQUE (partition_tag,email)
) ENGINE=InnoDB;

-- information pertaining to each processed message as a whole;
-- NOTE: records with NULL msgs.content should be ignored by utilities,
--   as such records correspond to messages just being processes, or were lost
-- NOTE: instead of a character field time_iso, one might prefer:
--   time_iso TIMESTAMP NOT NULL DEFAULT 0,
--   but the following MUST then be set in amavisd.conf: $timestamp_fmt_mysql=1
CREATE TABLE msgs (
  partition_tag integer    DEFAULT 0,   -- see $sql_partition_tag
  mail_id    varbinary(12) NOT NULL PRIMARY KEY,  -- long-term unique mail id
  secret_id  varbinary(12)   DEFAULT '',  -- authorizes release of mail_id
  am_id      varchar(20)   NOT NULL,    -- id used in the log
  time_num   integer unsigned NOT NULL, -- rx_time: seconds since Unix epoch
  time_iso   char(16)      NOT NULL,    -- rx_time: ISO8601 UTC ascii time
  sid        bigint unsigned NOT NULL, -- sender: maddr.id
  policy     varchar(255)  DEFAULT '',  -- policy bank path (like macro %p)
  client_addr varchar(255) DEFAULT '',  -- SMTP client IP address (IPv4 or v6)
  size       integer unsigned NOT NULL, -- message size in bytes
  content    binary(1),                 -- content type: V/B/S/s/M/H/O/C:
    -- virus/banned/spam(kill)/spammy(tag2)/bad-mime/bad-header/oversized/clean
    -- is NULL on partially processed mail
    -- use binary instead of char for case sensitivity ('S' != 's')
  quar_type  binary(1),                 -- quarantined as: ' '/F/Z/B/Q/M/L
                                        --  none/file/zipfile/bsmtp/sql/
                                        --  /mailbox(smtp)/mailbox(lmtp)
  quar_loc   varbinary(255) DEFAULT '', -- quarantine location (e.g. file)
  dsn_sent   char(1),                   -- was DSN sent? Y/N/q (q=quenched)
  spam_level float,                     -- SA spam level (no boosts)
  message_id varchar(255)  DEFAULT '',  -- mail Message-ID header field
  from_addr  varchar(255)  DEFAULT '',  -- mail From header field,    UTF8
  subject    varchar(255)  DEFAULT '',  -- mail Subject header field, UTF8
  host       varchar(255)  NOT NULL,    -- hostname where amavisd is running
  FOREIGN KEY (sid) REFERENCES maddr(id) ON DELETE RESTRICT
) ENGINE=InnoDB;
CREATE INDEX msgs_idx_sid      ON msgs (sid);
CREATE INDEX msgs_idx_mess_id  ON msgs (message_id); -- useful with pen pals
CREATE INDEX msgs_idx_time_num ON msgs (time_num);
-- alternatively when purging based on time_iso (instead of msgs_idx_time_num):
-- CREATE INDEX msgs_idx_time_iso ON msgs (time_iso);

-- per-recipient information related to each processed message;
-- NOTE: records in msgrcpt without corresponding msgs.mail_id record are
--  orphaned and should be ignored and eventually deleted by external utilities
CREATE TABLE msgrcpt (
  partition_tag integer    DEFAULT 0,    -- see $sql_partition_tag
  mail_id    varbinary(12) NOT NULL,     -- (must allow duplicates)
  rid        bigint unsigned NOT NULL,   -- recipient: maddr.id (dupl. allowed)
  ds         char(1)       NOT NULL,     -- delivery status: P/R/B/D/T
                                         -- pass/reject/bounce/discard/tempfail
  rs         char(1)       NOT NULL,     -- release status: initialized to ' '
  bl         char(1)       DEFAULT ' ',  -- sender blacklisted by this recip
  wl         char(1)       DEFAULT ' ',  -- sender whitelisted by this recip
  bspam_level float,                     -- spam level + per-recip boost
  smtp_resp  varchar(255)  DEFAULT '',   -- SMTP response given to MTA
  FOREIGN KEY (rid)     REFERENCES maddr(id)     ON DELETE RESTRICT,
  FOREIGN KEY (mail_id) REFERENCES msgs(mail_id) ON DELETE CASCADE
) ENGINE=InnoDB;
CREATE INDEX msgrcpt_idx_mail_id  ON msgrcpt (mail_id);
CREATE INDEX msgrcpt_idx_rid      ON msgrcpt (rid);

-- mail quarantine in SQL, enabled by $*_quarantine_method='sql:'
-- NOTE: records in quarantine without corresponding msgs.mail_id record are
--  orphaned and should be ignored and eventually deleted by external utilities
CREATE TABLE quarantine (
  partition_tag integer    DEFAULT 0,    -- see $sql_partition_tag
  mail_id    varbinary(12) NOT NULL,     -- long-term unique mail id
  chunk_ind  integer unsigned NOT NULL,  -- chunk number, starting with 1
  mail_text  blob          NOT NULL,     -- store mail as chunks of octets
  PRIMARY KEY (mail_id,chunk_ind),
  FOREIGN KEY (mail_id) REFERENCES msgs(mail_id) ON DELETE CASCADE
) ENGINE=InnoDB;

INSERT INTO policy (id, policy_name,
  virus_lover, spam_lover, banned_files_lover, bad_header_lover,
  bypass_virus_checks, bypass_spam_checks,
  bypass_banned_checks, bypass_header_checks, spam_modifies_subj,
  spam_tag_level, spam_tag2_level, spam_kill_level) VALUES
  (1, 'Non-paying',    'N','N','N','N', 'Y','Y','Y','N', 'Y', 3.0,   7, 10),
  (2, 'Uncensored',    'Y','Y','Y','Y', 'N','N','N','N', 'N', 3.0, 999, 999),
  (3, 'Wants all spam','N','Y','N','N', 'N','N','N','N', 'Y', 3.0, 999, 999),
  (4, 'Wants viruses', 'Y','N','Y','Y', 'N','N','N','N', 'Y', 3.0, 6.9, 6.9),
  (5, 'Normal',        'N','N','N','N', 'N','N','N','N', 'Y', -999, 6.9, 9.0),
  (6, 'Trigger happy', 'N','N','N','N', 'N','N','N','N', 'Y', 3.0,   5, 5),
  (7, 'Permissive',    'N','N','N','Y', 'N','N','N','N', 'Y', 3.0,  10, 20);</programlisting>

      <para>To run this SQL:</para>

      <programlisting>mysql -p mail_amavis &lt; amavis-schema.sql</programlisting>

      <para>Now that we have the database set we need to reconfigure
      amavisd-new.</para>

      <para>Open /etc/amavis/conf.d/50-user and add/set the the information
      that amavis needs to connect to the database (replace
      <literal>new_passwd</literal> with the password you chose for the amavis
      user):</para>

      <screen>@lookup_sql_dsn =  ( ['DBI:mysql:database=mail_amavis;host=127.0.0.1;port=3306', 'amavis', 'new_passwd']);
@storage_sql_dsn = @lookup_sql_dsn;</screen>

      <para>If you decided to split read and read/write parts of the amavis
      database you will need to set <varname>@storage_sql_dsn</varname> with
      the correct options.</para>

      <para>As we mentiond before, we were using <literal>@local_domains_acl =
      ( ".$mydomain", "domain2.com", "domain3.org" );</literal> to tell amavis
      to run spam and virus checks for mail addressed to one of this domains.
      This is a problem because every time we add another domain we have to
      edit the configuration file to add the new domain to the list of local
      domains.</para>

      <para>To solve this problem we have two options. One is to just check
      all of the incoming mail to the system for spam and viruses regardless
      of the recipients domaint. We can do this by rewriting the query that
      amavis uses to check if the email address is local to the system:</para>

      <para><screen>$sql_select_policy = 'SELECT "Y" AS local, 1 AS id;</screen></para>

      <para>But, this is not the recommended way. I didn't even test this, so
      your milage may vary. The recommended way is to just insert every domain
      you host in the users table.</para>

      <para>For example:</para>

      <para><programlisting>mysql&gt; USE mail_amavis;
Database changed
INSERT INTO users VALUES ( NULL, 5, 5, '@example.com',      NULL, 'Y');</programlisting></para>

      <para>To explain what this does, first lets take a look at the users
      table now:</para>

      <para><screen>mysql&gt; select * from users;
+----+----------+-----------+--------------+----------+-------+
| id | priority | policy_id | email        | fullname | local |
+----+----------+-----------+--------------+----------+-------+
|  1 |        5 |         5 | @example.com | NULL     | Y     |
+----+----------+-----------+--------------+----------+-------+
</screen></para>

      <para>This raw in the table will match all email directed to any email
      address @example.com domain (that is because the local is set to Y). If
      we add another raw to the table that has email set to
      someuser@example.com and priority is higher than 5 this users policy
      will have precedance over the domains policy.</para>

      <para>And finaly the policy_id. In this example it says that all the
      email directed to @example.com domain will use a policy with an
      identifier 5. If you take a look at the amavis-schema.sql file we used
      to create the database for amavis, at the end we also inserted some
      policies, and the policy with an ID 5 was inserted like this:</para>

      <para><screen>INSERT INTO policy (id, policy_name,
  virus_lover, spam_lover, banned_files_lover, bad_header_lover,
  bypass_virus_checks, bypass_spam_checks,
  bypass_banned_checks, bypass_header_checks, spam_modifies_subj,
  spam_tag_level, spam_tag2_level, spam_kill_level) VALUES
  (5, 'Normal',        'N','N','N','N', 'N','N','N','N', 'Y', -999, 6.9, 9);</screen></para>

      <para>We will skeep through most of the options (you have amavisd-new
      documentation if you want to go into detail) but we will look at the
      last three numbers inserted. spam_tag_level, spam_tag2_level and
      spam_kill_level are set to 3.0, 6.9 and 8.0 respectively. This means
      that emails that are flagged with over -999 (that should be all emails)
      by SpamAssassin will have X-Spam headers added to them. Emails tagged
      over 6.9 will have "SPAM" added to the subject and emails tagged over 9
      will trigger spam evasive actions (depends on what you have
      $final_spam_destiny set to in the config file
      /etc/amavis/conf.d/50-user).</para>

      <para>If you still want to set the same settings for all of the domains
      you can add a catchall user to the users table that will use the policy
      with ID 5.</para>

      <screen>INSERT INTO users VALUES (NULL, 0, 5, '@.',             NULL, 'Y');</screen>
    </section>

    <section xml:id="antispam.amavis.maintenance">
      <title>Maintenance</title>

      <para>You will have to cleanup the records in the MySQL from time to
      time, so we are going to create a PHP script that is going to be run
      daily with CRON.</para>

      <programlisting role="php">#!/usr/bin/php
&lt;?php

/**
 * Amavisd-new cleanup script
 * 
 * Based on the Amavisd-new documentation shipped with amavisd-new package in
 * Debian 6.0 (Squeeze). Version of Amavisd-new 2.6.4.
 *
 * @author Goran Juric
**/

$host = 'localhost';
$user = 'amavis';
$password = 'new_passwd';
$database = 'mail_amavis';
$keep_days = 14;

// Calculate the timestamp
$prune_older_then = time() - ($keep_days * 24 * 60 * 60);

// Connect to the database
$link = mysql_connect($host, $user, $password);
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
$db = mysql_select_db($database, $link);
if (!$db) {
    die ("Can't use $database : " . mysql_error());
}

// Delete old msgs records based on timestamps only (for time_iso see next),
// and delete leftover msgs records from aborted mail checking operations
mysql_query("DELETE FROM msgs WHERE time_num &lt; $prune_older_then ;", $link) or die(mysql_error());;
mysql_query("DELETE FROM msgs WHERE time_num &lt; 60*60 AND content IS NULL;", $link) or die(mysql_error());;

// Delete unreferenced e-mail addresses
mysql_query("DELETE FROM maddr
  WHERE NOT EXISTS (SELECT 1 FROM msgs    WHERE sid=id)
    AND NOT EXISTS (SELECT 1 FROM msgrcpt WHERE rid=id);", $link) or die(mysql_error());;

// When a FOREIGN KEY ... ON DELETE CASCADE is not used, tables msgrcpt
// and quarantine need to be purged explicitly, e.g.:
mysql_query("DELETE FROM quarantine
  WHERE NOT EXISTS (SELECT 1 FROM msgs WHERE mail_id=quarantine.mail_id);", $link) or die(mysql_error());;
mysql_query("DELETE FROM msgrcpt
  WHERE NOT EXISTS (SELECT 1 FROM msgs WHERE mail_id=msgrcpt.mail_id);", $link) or die(mysql_error());;

// Optimize tables
mysql_query("OPTIMIZE TABLE msgs, msgrcpt, quarantine, maddr;", $link) or die(mysql_error());;

// Close the database
mysql_close($link);</programlisting>

      <para>Save this file to
      <filename>/etc/cron.daily/amavisd-new-cleanup</filename> (change the
      password at the top of the file) and make the script executable:</para>

      <programlisting>chmod +x /etc/cron.daily/amavisd-new-cleanup
chmod 700 /etc/cron.daily/amavisd-new-cleanup</programlisting>
    </section>

    <section xml:id="antispam.amavis.util">
      <title>Utilities</title>

      <para>If you want a GUI for managing your Amavisd-new configuration take
      a look at <link xl:href="http://postvisadmin.sourceforge.net/">Postvis
      Admin</link>.</para>
    </section>
  </section>

  <section xml:id="antispam.dkim">
    <title>DKIM</title>

    <para>Using <link xl:href="http://www.dkim.org/">DKIM</link> signing of
    your outgoing emails gives you a better chance (though it depend on the
    recipients server configuration) that your mail does not get classified as
    spam. Bumping down the spam score of valid DKIM signed email can also
    prevent false positives.</para>

    <section xml:id="antispam.dkim.checking">
      <title>DKIM check for incoming emails</title>

      <para>To enable checking of DKIM in SpamAssasin edit
      <filename>/etc/spamassassin/v312.pre</filename> and uncomment this
      line:</para>

      <screen>loadplugin Mail::SpamAssassin::Plugin::DKIM</screen>

      <para>Make sure to install <application>libmail-dkim-perl</application>
      package.</para>

      <programlisting>apt-get install libmail-dkim-perl</programlisting>

      <para>Default score for DKIM signed domains are quite low, I usually set
      in my <filename>/etc/spamassassin/local.cf</filename></para>

      <screen>score DKIM_VERIFIED -1
score DKIM_SIGNED    0</screen>

      <para>so verified DKIM signed emails have a lower spam score. Although,
      be aware, spammers sometime also sign emails with DKIM. But you will at
      least be able to know for sure that the spam email came from the
      specified domain.</para>

      <para>Amavisd-new has a lot of advanced options that you can fine tune
      for DKIM signed emails, but you will have to look at the amavisd-new
      documentation for more information.</para>
    </section>

    <section xml:id="antispam.dkim.signing">
      <title>Signing your outgoing mail</title>

      <para>We are going to sign are outgoing mail using amavisd-new DKIM
      signing (we are not going to use dkim-milters). For this to work as
      expected we will need to distinguish between mail coming from the
      incoming and outgoing emails going through our system because we only
      want to sign outgoing emails.</para>

      <para>We are going to achieve this by classifying users in postfix and
      sending our locally originating emails to amavisd-new on port 10026, and
      all other mail (incoming mail from other domains) we are going to send
      to amavisd-new on the port 10024 as we were doing before DKIM
      implementation.</para>

      <section xml:id="antispam.dkim.signing.postfix">
        <title>Postfix</title>

        <para>Open up <filename>/etc/postfix/main.cf</filename>, find the line
        containing your smtpd_sender_restrictions and add check_sender_acces
        before and after other rules listed there:</para>

        <screen>smtpd_sender_restrictions =
# If mail is coming from mynetwork or from authenticated users use amavis filtering on port 10026 (DKIM signing)
  check_sender_access regexp:/etc/postfix/amavis/tag_as_originating.re
  permit_mynetworks
  permit_sasl_authenticated
  permit_tls_clientcerts
# For other mail use amavis filtering on port 10024 (skips DKIM signing)
  check_sender_access regexp:/etc/postfix/amavis/tag_as_foreign.re</screen>

        <para>Create
        <filename>/etc/postfix/amavis/tag_as_originating.re</filename> and
        insert:</para>

        <para><screen>/^/ FILTER smtp-amavis:[127.0.0.1]:10026</screen></para>

        <para>Create
        <filename>/etc/postfix/amavis/tag_as_foreign.re</filename> and
        insert:</para>

        <para><screen>/^/ FILTER smtp-amavis:[127.0.0.1]:10024</screen></para>
      </section>

      <section xml:id="antispam.dkim.signing.amavis">
        <title>Amavisd-new</title>

        <para>We are going to use one key to sign all of our domain with the
        same key. When you move one of the virtual domains to another server
        you will either have to copy the same private key used for signing
        domains to the other server, or you will have to change the DNS record
        of the domain you are moving so that its TXT record showing the public
        key is updated with the new key that will be used on the other server
        (or disable DKIM signing).</para>

        <para>We are going to generate a new private key and store it in the
        <filename>/etc/amavis/dkim</filename>.</para>

        <programlisting>amavisd-new genrsa /etc/amavis/dkim/atlantis-example-com.key.pem</programlisting>

        <para>Open <filename>/etc/amavisd.conf/50-user</filename> and
        replace</para>

        <screen>$inet_socket_port = [10024,9998];</screen>

        <para>with</para>

        <screen>$inet_socket_port = [10024,10026,9998];</screen>

        <para>You also need to enable the dkim signing, so add</para>

        <screen>$enable_dkim_signing = 1;  # loads DKIM signing code</screen>

        <para>and add the key for all of the domains you want to sign.</para>

        <screen># Set keys
dkim_key('example.com', 'mail', '/etc/amavis/dkim/atlantis-example-com.key.pem');
dkim_key('some-other-virtual.com', 'mail', '/etc/amavis/dkim/atlantis-example-com.key.pem');
dkim_key('another-virtual', 'mail', '/etc/amavis/dkim/atlantis-example-com.key.pem');
....</screen>

        <para>If you want to generate a specific private key for every domain
        you just have to edit the path to the key for the domain you want to
        change. mail in this example is a selector and you can put anything
        you like here. The value you enter here has to be inserted on your DNS
        record.</para>

        <para>One more thing we need to do in the
        <filename>/etc/amavis/conf.d/50-user</filename> is to create a policy
        that will be used for mail coming on port 1026 that need to be
        signed:</para>

        <programlisting role="perl"># switch policy bank to 'ORIGINATING' for mail received on port 10026:
$interface_policy{'10026'} = 'ORIGINATING';
$policy_bank{'ORIGINATING'} = {  # mail originating from our users
  originating =&gt; 1,  # indicates client is ours, allows signing
  # force MTA to convert mail to 7-bit before DKIM signing
  # to avoid later conversions which could destroy signature:
  smtpd_discard_ehlo_keywords =&gt; ['8BITMIME'],
};</programlisting>

        <para>Since this is the policy that is used for outgoing mail you can
        use it to change some other settings as well, but for this you will
        have to consult the amavisd-new documentation on <link
        xl:href="http://amavisd.de.postfix.org/amavisd-new-docs.html#pbanks">policy
        banks</link>.</para>
      </section>

      <section xml:id="antispam.dkim.signing.dns">
        <title>DNS</title>

        <para>To get the the TXT record which contains the public part of your
        key you have to run:</para>

        <programlisting>amavisd-new showkeys</programlisting>

        <para>and you should get something like this:</para>

        <screen>mail._domainkey.example.com.   3600 TXT (
  "v=DKIM1; p="
  "MIGfMA0GCSqGSIbHASU3KSMA84GNADCBiQKBgQDZNEarYcwLtVJ5y/gMUM8UimUX"
  "Dp9oluwww1KdTGTQkg3OYyYfDyt8ZoutsxT6cnpMvG8D0jLLKy8rHGWE5I7pdQbL"
  "qADufNR/08c7Ti3GSK3/WoWXQv/NzYLXaf7bdSk5f6+XZHCp/EKOuW6I/2Q7dv/B"
  "+rAJJQZggHbolduwCwID2HBR")</screen>

        <para>u have to paste this into your DNS server configuration. If you
        are using an online tool to manage your domain name records (like
        GoDaddys Total DNS Control) you will have to create a new TXT record
        and for the TXT name enter</para>

        <programlisting>mail._domainkey</programlisting>

        <para>and for the value you will have to “glue” the multiple lines
        into one and erase all the quotation marks.</para>

        <screen>v=DKIM1; p=MIGfMA0GCSqGSIbHASU3KSMA84GNAD.....B+rAJJQZggHbolduwCwID2HBR</screen>

        <para>If you used another selector instead of mail you have to enter
        <computeroutput>your-selector._domainkey</computeroutput>.</para>
      </section>

      <section xml:id="antispam.dkim.finish">
        <title>Wrap it up</title>

        <para>All that is left to do is to restart amavisd-new and reload
        postfix configuration.</para>

        <programlisting>/etc/init.d/amavis restart
/etc/init.d/postfix restart</programlisting>

        <para>If your DNS zone files have refreshed you will be able to
        use</para>

        <programlisting>amavisd-new testkeys</programlisting>

        <para>If everything is set up properly this test should pass.</para>

        <screen>TESTING: mail._domainkey.example.com      =&gt; pass</screen>

        <para>Commit your changes with etckeeper.</para>
      </section>
    </section>
  </section>

  <section xml:id="antispam.rbl">
    <title>RBL lists</title>

    <para><link xl:href="http://en.wikipedia.org/wiki/DNSBL">RBL (DNSBL)
    lists</link> are an efficient way of controlling spam. Postfix has built
    in support for RBL lists. We are going to add checking of RBL list <link
    xl:href="http://www.spamhaus.org/zen/">zen.spamhaus.org</link> by editing
    <filename>/etc/postfix/main.cf</filename> and adding
    <computeroutput>reject_rbl_client zen.spamhaus.org</computeroutput> to a
    list of smtpd_recipient_restrictions.</para>

    <screen>smtpd_recipient_restrictions =
    permit_mynetworks
    permit_sasl_authenticated 
    reject_unauth_destination
    reject_unlisted_recipient
    reject_unverified_recipient
    reject_rbl_client zen.spamhaus.org</screen>
  </section>

  <section xml:id="antispam.greylisting">
    <title>Greylisting</title>

    <para>From all the spam fighting measures I have tried, <link
    xl:href="http://en.wikipedia.org/wiki/Greylisting">greylisting</link>
    block the most of the spam. Of course, it has its downsides, but if you
    can live with waiting for the first mail from a person for a 30 minutes
    more then normal I highly recommend it.</para>

    <para>There are various greylisting implementations that work with Postfix
    but I recommend <application>sqlgrey</application> because it works with a
    database and has a nice looking GUI so you can manage it using your web
    browser.</para>

    <programlisting>apt-get install sqlgrey</programlisting>

    <para>Now we need to create a database and a user for sqlgrey so it can
    connect to the database. Enter <application>mysql</application> and
    run:</para>

    <screen>mysql&gt; create database mail_sqlgrey;
Query OK, 1 row affected (0.00 sec)

mysql&gt; CREATE USER 'sqlgrey'@'localhost' IDENTIFIED BY 'newpasswd';
Query OK, 0 rows affected (0.02 sec)

mysql&gt; GRANT ALL PRIVILEGES ON `mail_sqlgrey` . * TO 'sqlgrey'@'localhost';
Query OK, 0 rows affected (0.02 sec)</screen>

    <para>Choose your own password naturally. Open
    <filename>/etc/sqlgrey/sqlgrey.conf</filename> and edit the database
    settings.</para>

    <screen>db_type = mysql               
db_name = mail_sqlgrey
# Note: the following are not used with SQLite
db_host = localhost
db_port = default
db_user = sqlgrey
db_pass = newpasswd </screen>

    <para>While you are at it examine the other settings in the config file
    and change them if appropriately.</para>

    <para>Restart <application>sqlgrey</application> and check that the tables
    inside the <computeroutput>mail_sqlgrey</computeroutput> database are
    created.</para>

    <programlisting>/etc/init.d/sqlgrey restart</programlisting>

    <para>To tell Postfix to use sqlgrey edit
    <filename>/etc/postfix/main.cf</filename> and add check_policy_service to
    your <computeroutput>smtpd_recipient_resctriction</computeroutput>
    directive.</para>

    <screen>smtpd_recipient_restrictions =
    ... your other rules ...
    check_policy_service inet:127.0.0.1:2501</screen>

    <para>Restart Postfix and commit your changes.</para>

    <programlisting>/etc/init.d/postfix restart
etckeeper commit "Added greylisting to Postfix"</programlisting>

    <note>
      <para>If you want to use a web interface to edit the white- and
      blacklists as well as the current state of the greylist take a look at
      <link xl:href="http://www.vanheusden.com/sgwi/">sgwi</link>.</para>
    </note>
  </section>
</chapter>
