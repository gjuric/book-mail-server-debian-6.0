<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="antispam" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Fighting spam</title>

  <para>Amavisd-new is a program that receives mail from Postfix, passes it
  through SpamAssassin and ClamAV and based on the user (or global) settings
  decides if the mail should be flagged as a spam, deleted or delivered as a
  legitimate mail.</para>

  <para>We are going to install all of the packages at once.</para>

  <programlisting>apt-get install amavisd-new spamassassin clamav-daemon</programlisting>

  <section xml:id="antispam.clamav">
    <title>ClamAV</title>

    <para>ClamAV needs some utilities that are not provided in the mail Debian
    repository. This utillities will be used to extract email attachments so
    the content of the archives can be scanned for potential viruses.</para>

    <para>Because of this utillites we need to add
    <emphasis>contrib</emphasis> and <emphasis>non-free</emphasis>
    repositories to the <filename>/etc/apt/sources.list</filename>. To do this
    you have to append ”<computeroutput>contrib non-free</computeroutput>” on
    every line that starts with deb, and ends with main. Your
    <filename>/etc/apt/sources.list</filename> file should look like
    this:</para>

    <screen>deb http://ftp2.de.debian.org/debian/ squeeze main contrib non-free
deb-src http://ftp2.de.debian.org/debian/ squeeze main

deb http://security.debian.org/ squeeze/updates main contrib non-free
deb-src http://security.debian.org/ squeeze/updates main

deb http://ftp2.de.debian.org/debian/ squeeze-updates main contrib non-free
deb-src http://ftp2.de.debian.org/debian/ squeeze-updates main</screen>

    <para>After editing <filename>/etc/apt/sources.list</filename> commit the
    changes you made to <filename>sources.list</filename> with etckeeper. Now
    we need to update the apt database. While we are at it we can also check
    if there are any packages that should be updated.</para>

    <programlisting>apt-get update
apt-get upgrade</programlisting>

    <para>Now we are ready to install utilities for decompression of
    archives.</para>

    <programlisting>apt-get install arj bzip2 cabextract cpio file gzip lha nomarch pax rar unrar unzip zip zoo</programlisting>

    <para>Add clamav user to the amavis group and vice versa in order for
    Clamav to have access to scan files:</para>

    <programlisting>adduser clamav amavis
adduser amavis clamav</programlisting>

    <para>Restart amavis and clamav-daemon.</para>

    <programlisting>/etc/init.d/clamav-daemon restart
/etc/init.d/amavis restart</programlisting>
  </section>

  <section xml:id="antispam.spamassassin">
    <title>SpamAssassin</title>

    <para>Both SpamAssassin and amavisd-new are Perl programs, and amavisd-new
    includes SpamaAssassins libraries so it doesn't need SpamAssassin daemon
    running on the server. We are going to turn off the daemon and prevent it
    from starting up during boot.</para>

    <programlisting>/etc/init.d/spamassassin stop
update-rc.d -f spamassassin remove
etckeeper commit "Removed spamassassin from rcX.d"</programlisting>

    <para>To enable DKIM checking of received emails in SpamAssassin one has
    to install Mail::DKIM Perl library.</para>

    <programlisting>apt-get install libmail-dkim-perl</programlisting>

    <para>Edit <filename>/etc/spamassassin/v312.pre</filename> and check that
    this line is uncommented:</para>

    <screen>loadplugin Mail::SpamAssassin::Plugin::DKIM</screen>

    <para>We are also going to install Pyzor and Razor for additional
    checks.</para>

    <programlisting>apt-get install pyzor razor</programlisting>

    <para>After that you can try running SpamAssassing manually:</para>

    <programlisting>spamassassin -D -t &lt; /usr/share/doc/spamassassin/examples/sample-spam.txt 2&gt;&amp;1 | tee sa.out</programlisting>

    <para>You should see DKIM mentioned in the sa.out file, and the end of the
    output should look something like this:</para>

    <screen>Content analysis details:   (1004.5 points, 5.0 required)

 pts rule name              description
---- ---------------------- --------------------------------------------------
-0.0 NO_RELAYS              Informational: message was not relayed via SMTP
1000 GTUBE                  BODY: Generic Test for Unsolicited Bulk Email
 0.4 RAZOR2_CF_RANGE_51_100 Razor2 gives confidence level above 50%
                            [cf: 100]
 0.5 RAZOR2_CF_RANGE_E4_51_100 Razor2 gives engine 4 confidence level
                            above 50%
                            [cf: 100]
 1.7 RAZOR2_CHECK           Listed in Razor2 (http://razor.sf.net/)
 2.0 PYZOR_CHECK            Listed in Pyzor (http://pyzor.sf.net/)
 0.0 DIGEST_MULTIPLE        Message hits more than one network digest check
-0.0 NO_RECEIVED            Informational: message has no Received headers</screen>

    <section xml:id="antispam.spamassassin.training">
      <title>Training SpamAssassin</title>

      <para>Bayes filtering is a strong weapon for fighting spam. It works by
      learning what is spam to you and what isn't. For SpamAssassing to start
      using Bayes filtering you have to train it first. Training your Bayes
      filters is something that you should do on a regular basis. The more
      emails it process the smarter it gets.</para>

      <para>To learn SpamAssassin what is spam, you have to use the sa-learn
      utillity on a folder where your spam messages are stored (in my case the
      folder is called <filename>Junk</filename>).</para>

      <para>Because SpamAssassin is run by amavisd-new you have to run the
      sa-learn utility as the amavis user.</para>

      <programlisting>su amavis sa-learn --no-sync --spam /home/vmail/example.com/demo/.Junk/cur</programlisting>

      <para>To learn what is not spam run sa-learn in the folder that only
      contains your non-spam mail (in this case, sa-learn examines the
      <filename>Inbox</filename> folder).</para>

      <programlisting>su amavis sa-learn --no-sync --ham /home/vmail/example.com/demo/cur</programlisting>

      <para>Bayes filtering will be used once you train SpamAssassin on more
      than 200 spam <emphasis>and</emphasis> ham messages.</para>

      <para>To update SpamAssassin you can run:</para>

      <programlisting>sa-update -D</programlisting>

      <para><computeroutput>-D</computeroutput> is for debug.</para>
    </section>

    <section xml:id="antispam.spamassassin.bayes-mysql">
      <title>Move Bayes data to MySQL</title>

      <para>TODO</para>
    </section>
  </section>

  <section xml:id="antispam.amavis">
    <title>Amavisd-new</title>

    <para>Edit <filename>/etc/amavis/conf.d/15-content_filter_mode</filename>
    and ucomment antivirus and spam checking</para>

    <screen>use strict;

# You can modify this file to re-enable SPAM checking through spamassassin
# and to re-enable antivirus checking.

#
# Default antivirus checking mode
# Uncomment the two lines below to enable it back
#

@bypass_virus_checks_maps = (
   \%bypass_virus_checks, \@bypass_virus_checks_acl, \$bypass_virus_checks_re);


#
# Default SPAM checking mode
# Uncomment the two lines below to enable it back
#

@bypass_spam_checks_maps = (
   \%bypass_spam_checks, \@bypass_spam_checks_acl, \$bypass_spam_checks_re);

1;  # ensure a defined return
</screen>

    <para>To integrate Amavis with Postfix we need to add a content_filter in
    <filename>/etc/postfix/main.cf</filename>.</para>

    <programlisting>content_filter = smtp-amavis:[127.0.0.1]:10024</programlisting>

    <para>Open <filename>/etc/postfix/master.cf</filename> and add this at the
    end of the file:</para>

    <screen>smtp-amavis     unix    -       -       -       -       2       smtp
        -o smtp_data_done_timeout=1200
        -o smtp_send_xforward_command=yes
        -o disable_dns_lookups=yes
        -o max_use=20

127.0.0.1:10025 inet    n       -       -       -       -       smtpd
        -o content_filter=
        -o local_recipient_maps=
        -o relay_recipient_maps=
        -o smtpd_restriction_classes=
        -o smtpd_delay_reject=no
        -o smtpd_client_restrictions=permit_mynetworks,reject
        -o smtpd_helo_restrictions=
        -o smtpd_sender_restrictions=
        -o smtpd_recipient_restrictions=permit_mynetworks,reject
        -o smtpd_data_restrictions=reject_unauth_pipelining
        -o smtpd_end_of_data_restrictions=
        -o mynetworks=127.0.0.0/8
        -o smtpd_error_sleep_time=0
        -o smtpd_soft_error_limit=1001
        -o smtpd_hard_error_limit=1000
        -o smtpd_client_connection_count_limit=0
        -o smtpd_client_connection_rate_limit=0
        -o receive_override_options=no_header_body_checks,no_unknown_recipient_checks</screen>

    <para>and add this immediately below the “pickup” transport
    service:</para>

    <screen>         -o content_filter=
         -o receive_override_options=no_header_body_checks</screen>

    <para>This will prevent messages that are generated to report on spam from
    being classified as spam.</para>

    <para>Amavisd-new listens on port 1024 where Postfix sends all of the mail
    coming into the server. After processing the email amavisd-new returns the
    mail to Postfix on port 1025 for final delivery.</para>

    <para>Edit <filename>/etc/amavis/conf.d/50-user</filename> and paste this
    into the file:</para>

    <screen>use strict;

@local_domains_acl = ( ".$mydomain" );

$sa_spam_subject_tag = 'SPAM &gt; ';
$sa_tag_level_deflt  = -999;  # add spam info headers if at, or above that level
$sa_tag2_level_deflt = 5; # add 'spam detected' headers at that level
$sa_kill_level_deflt = 12; # triggers spam evasive actions

$final_virus_destiny      = D_DISCARD;  # (data not lost, see virus quarantine)
$final_banned_destiny     = D_REJECT;   # D_REJECT when front-end MTA
$final_spam_destiny       = D_DISCARD;
$final_bad_header_destiny = D_PASS;     # False-positive prone (for spam)

#------------ Do not modify anything below this line -------------
1;  # ensure a defined return
</screen>

    <para>Of course, you do not just want to paste stuff into configuration
    files without knowing what are you actually doing. So let us go through
    the file, line by line:</para>

    <screen>@local_domains_acl = ( ".$mydomain" );</screen>

    <para>This is a list of domains for which this server considers itself as
    a final destination. If you do not add all your domains here, they will
    not be processed by amavis, so if you have more domains on your server,
    except for the default line, this should look something like this:</para>

    <screen>@local_domains_acl = ( ".$mydomain", "domain2.com", "domain3.org" );</screen>

    <para>Later, we will see how can automate this to read the information
    from the database.</para>

    <screen>$sa_spam_subject_tag = 'SPAM &gt; ';
$sa_tag_level_deflt  = -999;  # add spam info headers if at, or above that level
$sa_tag2_level_deflt = 5; # add 'spam detected' headers at that level
$sa_kill_level_deflt = 12; # triggers spam evasive actions</screen>

    <para>When SpamAssassin processes message, it gives them a score
    identifying what is the probability of message being a spam.
    <computeroutput>$sa_tag_level_deflt</computeroutput> tells amavis that ig
    the score is greater or equal to this level that amavis should append
    X-Spam headers to the message. The score of -999 means that we want to
    apply <computeroutput>X-Spam</computeroutput> header to all of our
    messages, so it is easier for us to see why is, or why is not, a message
    considered spam by examining the headers of the message.</para>

    <para><computeroutput>$sa_tag2_level_deflt = 5;</computeroutput> is the
    spam level the message needs to reach for amavis to apply the header
    <computeroutput>X-Spam-Flag: YES</computeroutput> so we (our mail client)
    knows that this message is considered to be spam. At this level the
    message subject is prefixed with the value of the variable
    <computeroutput>$sa_spam_subject_tag</computeroutput>. In this case the
    subject is prefixed with “<computeroutput>SPAM &gt;
    </computeroutput>”.</para>

    <para><computeroutput>$sa_kill_level_deflt</computeroutput> holds the
    value of the spam level that message needs to reach to do something with
    the message. What we are going to do with messages that are spam depends
    of the value of <computeroutput>$final_spam_destiny
    variable</computeroutput>. In this case we are discarding this
    messages.</para>

    <para>This means that the message is not going to reach to recipients
    mailbox at all. But that does not mean that the message is lost. Spam
    messages that are discarded can still be fetched from the system. Default
    configuration is to store them in the
    <filename>/var/lib/amavis/virusmails</filename> folder. It is possible to
    store them in the database.</para>

    <para>For releasing quarantined mail you need to add these lines:</para>

    <screen>$inet_socket_port = [10024,9998];
$interface_policy{'9998'} = 'AM.PDP-INET';
$policy_bank{'AM.PDP-INET'} = {
  protocol =&gt; 'AM.PDP',  # select Amavis policy delegation protocol
  inet_acl =&gt; [qw( 127.0.0.1 [::1] )],  # restrict access to these IP addresses
# auth_required_release =&gt; 0,  # don't require secret_id for amavisd-release
};</screen>

    <para>If you want to store everything in the database you have to add
    these lines as well:</para>

    <screen>@lookup_sql_dsn =  ( ['DBI:mysql:database=DATABASE-NAME;host=127.0.0.1;port=3306', 'USERNAME', 'PASSWORD']);
@storage_sql_dsn = @lookup_sql_dsn;

$virus_quarantine_method = 'sql:';
$spam_quarantine_method = 'sql:';
$banned_files_quarantine_method = 'sql:';
$bad_header_quarantine_method = 'sql:';</screen>

    <para>For this to work, you will have to create the database in MySQL and
    change the value of <computeroutput>@lookup_sql_dsn</computeroutput>
    variable to match your database, username &amp; password. You will have to
    create the tables for this database by looking at the amavis
    documentation). When you set this all up, you can use
    <application>Mailzu</application> or <application>Postvis
    Admin</application> to retrieve the quarantined messages. For users of
    <application>SquirrelMail</application> webmail system, there as a plugin
    called <application>AmavisNewSQL</application> which enables access for
    users to quarantined messages that were addressed to them.</para>

    <note>
      <para>Quarantined messages (on the file system, or in the database) have
      to be deleted periodically!</para>
    </note>

    <para>If you do not want to quarantine any of the messages, change</para>

    <screen>$virus_quarantine_method = 'sql:';
$spam_quarantine_method = 'sql:';
$banned_files_quarantine_method = 'sql:';
$bad_header_quarantine_method = 'sql:';</screen>

    <para>to</para>

    <screen>$virus_quarantine_method = undef;
$spam_quarantine_method = undef;
$banned_files_quarantine_method = undef;
$bad_header_quarantine_method = undef;</screen>

    <para>SQL support for amavis, except for easier access to quarantined
    messages also provides features to change spam setting on a per user
    basis. Once you create the database, and configure
    <computeroutput>@lookup_sql_dsn</computeroutput> this part is very easy
    achieved by reading through the amavis documentation.</para>

    <para>Messages that have a spam value between
    <computeroutput>$sa_tag2_level_deflt</computeroutput> and
    <computeroutput>$sa_kill_level_deflt</computeroutput> are delivered into
    the recipients mailbox and marked with “<computeroutput>SPAM
    &gt;</computeroutput>” in the subject and have the
    <computeroutput>X-Spam-Flag: YES</computeroutput> header added to them.
    Although this may be enough for you, since I use only IMAP access to the
    mailboxes I wanted to move this messages to the <filename>Junk</filename>
    folder inside the users mailbox automatically. This has some benefits:
    Inbox will not be filled with spam messages, but in case of a false
    positive, user could check his Junk folder to check for messages marked as
    spam. This folder can also be used for learning SpamAssassing what is
    spam, and if users move the messages that are not recognized as spam to
    this folder instead of deleting them SpamAssassin will get smarter about
    what is considered to be spam, and what is not.</para>

    <para>It's time to restart Postfix and Amavis and commit changes using
    etckeeper.</para>

    <programlisting>/etc/init.d/postfix restart
/etc/init.d/amavis restart
etckeeper commit "Configured amavisd-new"</programlisting>
  </section>

  <section xml:id="antispam.dkim">
    <title>DKIM</title>

    <para>Using <link xl:href="http://www.dkim.org/">DKIM</link> signing of
    your outgoing emails gives you a better chance (though it depend on the
    recipients server configuration) that your mail does not get classified as
    spam. Bumping down the spam score of valid DKIM signed email can also
    prevent false positives.</para>

    <section xml:id="antispam.dkim.checking">
      <title>DKIM check for incoming emails</title>

      <para>To enable checking of DKIM in SpamAssasin edit
      <filename>/etc/spamassassin/v312.pre</filename> and uncomment this
      line:</para>

      <screen>loadplugin Mail::SpamAssassin::Plugin::DKIM</screen>

      <para>Make sure to install <application>libmail-dkim-perl</application>
      package.</para>

      <programlisting>apt-get install libmail-dkim-perl</programlisting>

      <para>Default score for DKIM signed domains are quite low, I usually set
      in my <filename>/etc/spamassassin/local.cf</filename></para>

      <screen>score DKIM_VERIFIED -1
score DKIM_SIGNED    0</screen>

      <para>so verified DKIM signed emails have a lower spam score. Although,
      be aware, spammers sometime also sign emails with DKIM. But you will at
      least be able to know for sure that the spam email came from the
      specified domain.</para>

      <para>Amavisd-new has a lot of advanced options that you can fine tune
      for DKIM signed emails, but you will have to look at the amavisd-new
      documentation for more information.</para>
    </section>

    <section xml:id="antispam.dkim.signing">
      <title>Signing your outgoing mail</title>

      <para>We are going to sign are outgoing mail using amavisd-new DKIM
      signing (we are not going to use dkim-milters). For this to work as
      expected we will need to distinguish between mail coming from the
      incoming and outgoing emails going through our system because we only
      want to sign outgoing emails.</para>

      <para>We are going to achieve this by classifying users in postfix and
      sending our locally originating emails to amavisd-new on port 10026, and
      all other mail (incoming mail from other domains) we are going to send
      to amavisd-new on the port 10024 as we were doing before DKIM
      implementation.</para>

      <section xml:id="antispam.dkim.signing.postfix">
        <title>Postfix</title>

        <para>Open up <filename>/etc/postfix/main.cf</filename>, find the line
        <computeroutput>content_filter =
        smtp-amavis:[127.0.0.1]:10024</computeroutput> and replace it
        with:</para>

        <screen># Amavis content filtering

# On requing of messages sender_restriction are not checked so set the default filter that
# does not sign messages but performs other checks (spam, virus)
content_filter = smtp-amavis:[127.0.0.1]:10024

# If mail is coming from mynetwork or from authenticated users use amavis filtering on port 10026 (DKIM signing)
smtpd_sender_restrictions =
  check_sender_access regexp:/etc/postfix/tag_as_originating.re
  permit_mynetworks
  permit_sasl_authenticated
  permit_tls_clientcerts
# For other mail use amavis filtering on port 10024 (skips DKIM signing)
  check_sender_access regexp:/etc/postfix/tag_as_foreign.re</screen>

        <para>Create <filename>/etc/postfix/tag_as_originating.re</filename>
        and insert:</para>

        <para><screen>/^/ FILTER smtp-amavis:[127.0.0.1]:10026</screen></para>

        <para>Create <filename>/etc/postfix/tag_as_foreign.re</filename> and
        insert:</para>

        <para><screen>/^/ FILTER smtp-amavis:[127.0.0.1]:10024</screen></para>
      </section>

      <section xml:id="antispam.dkim.signing.amavis">
        <title>Amavisd-new</title>

        <para>We are going to use one key to sign all of our domain with the
        same key. When you move one of the virtual domains to another server
        you will either have to copy the same private key used for signing
        domains to the other server, or you will have to change the DNS record
        of the domain you are moving so that its TXT record showing the public
        key is updated with the new key that will be used on the other server
        (or disable DKIM signing).</para>

        <para>We are going to generate a new private key and store it in the
        <filename>/etc/amavis/dkim</filename>.</para>

        <programlisting>amavisd-new genrsa /etc/amavis/dkim/atlantis-example-com.key.pem</programlisting>

        <para>Open <filename>/etc/amavisd.conf/50-user</filename> and
        replace</para>

        <screen>$inet_socket_port = [10024,9998];</screen>

        <para>with</para>

        <screen>$inet_socket_port = [10024,10026,9998];</screen>

        <para>You also need to enable the dkim signing, so add</para>

        <screen>$enable_dkim_signing = 1;  # loads DKIM signing code</screen>

        <para>and add the key for all of the domains you want to sign.</para>

        <screen># Set keys
dkim_key('example.com', 'mail', '/etc/amavis/dkim/atlantis-example-com.key.pem');
dkim_key('some-other-virtual.com', 'mail', '/etc/amavis/dkim/atlantis-example-com.key.pem');
dkim_key('another-virtual', 'mail', '/etc/amavis/dkim/atlantis-example-com.key.pem');
....</screen>

        <para>If you want to generate a specific private key for every domain
        you just have to edit the path to the key for the domain you want to
        change. mail in this example is a selector and you can put anything
        you like here. The value you enter here has to be inserted on your DNS
        record.</para>

        <para>One more thing we need to do in the
        <filename>/etc/amavis/conf.d/50-user</filename> is to create a policy
        that will be used for mail coming on port 1026 that need to be
        signed:</para>

        <screen># switch policy bank to 'ORIGINATING' for mail received on port 10026:
$interface_policy{'10026'} = 'ORIGINATING';
$policy_bank{'ORIGINATING'} = {  # mail originating from our users
  originating =&gt; 1,  # indicates client is ours, allows signing
  # force MTA to convert mail to 7-bit before DKIM signing
  # to avoid later conversions which could destroy signature:
  smtpd_discard_ehlo_keywords =&gt; ['8BITMIME'],
};</screen>

        <para>Since this is the policy that is used for outgoing mail you can
        use it to change some other settings as well, but for this you will
        have to consult the amavisd-new documentation on <link
        xl:href="http://amavisd.de.postfix.org/amavisd-new-docs.html#pbanks">policy
        banks</link>.</para>
      </section>

      <section xml:id="antispam.dkim.signing.dns">
        <title>DNS</title>

        <para>To get the the TXT record which contains the public part of your
        key you have to run:</para>

        <programlisting>amavisd-new showkeys</programlisting>

        <para>and you should get something like this:</para>

        <screen>mail._domainkey.example.com.   3600 TXT (
  "v=DKIM1; p="
  "MIGfMA0GCSqGSIbHASU3KSMA84GNADCBiQKBgQDZNEarYcwLtVJ5y/gMUM8UimUX"
  "Dp9oluwww1KdTGTQkg3OYyYfDyt8ZoutsxT6cnpMvG8D0jLLKy8rHGWE5I7pdQbL"
  "qADufNR/08c7Ti3GSK3/WoWXQv/NzYLXaf7bdSk5f6+XZHCp/EKOuW6I/2Q7dv/B"
  "+rAJJQZggHbolduwCwID2HBR")</screen>

        <para>u have to paste this into your DNS server configuration. If you
        are using an online tool to manage your domain name records (like
        GoDaddys Total DNS Control) you will have to create a new TXT record
        and for the TXT name enter</para>

        <programlisting>mail._domainkey</programlisting>

        <para>and for the value you will have to “glue” the multiple lines
        into one and erase all the quotation marks.</para>

        <screen>v=DKIM1; p=MIGfMA0GCSqGSIbHASU3KSMA84GNAD.....B+rAJJQZggHbolduwCwID2HBR</screen>

        <para>If you used another selector instead of mail you have to enter
        <computeroutput>your-selector._domainkey</computeroutput>.</para>
      </section>

      <section>
        <title>Wrap it up</title>

        <para>All that is left to do is to restart amavisd-new and reload
        postfix configuration.</para>

        <programlisting>/etc/init.d/amavis restart
/etc/init.d/postfix restart</programlisting>

        <para>If your DNS zone files have refreshed you will be able to
        use</para>

        <programlisting>amavisd-new testkeys</programlisting>

        <para>If everything is set up properly this test should pass.</para>

        <screen>TESTING: mail._domainkey.example.com      =&gt; pass</screen>

        <para>Commit your changes with etckeeper.</para>
      </section>
    </section>
  </section>

  <section xml:id="antispam.greylisting">
    <title>Greylisting</title>

    <para>TODO: sqlgrey</para>
  </section>
</section>
