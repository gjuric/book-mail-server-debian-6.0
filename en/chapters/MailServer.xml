<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="mail-server"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Mail server</title>

  <para>We are going to install <application>Postfix</application> as our MTA
  (SMTP server) and <application>Courier</application> as our POP/IMAP server.
  <application>Postfix</application> will use virtual domains, and information
  about our domains and users will be stored in the
  <application>MySQL</application> database.</para>

  <para>For managing virtual domains and users we will use
  <application>PostfixAdmin</application>. For virus scanning and spam
  protection of our emails we will use <application>ClamAV</application> and
  <application>Spamassassin</application> that will be run using
  <application>amavisd-new</application>.</para>

  <para>As a local delivery agent we will use
  <application>Maildrop</application> that will be configured to move all
  messages marked as spam to the Junk folder as well as to make sure that
  users do not go over their assigned quota.</para>

  <para>This implementation of quota on the mail system does not require you
  to patch Postfix.</para>

  <para>All software is installed from official Debian repositories.</para>

  <note>
    <para>This tutorial is a combination of tutorials published on <link
    xl:href="http://articles.slicehost.com/email">http://articles.slicehost.com/email</link>
    and <link
    xl:href="https://help.ubuntu.com/community/PostfixCompleteVirtualMailSystemHowto">https://help.ubuntu.com/community/PostfixCompleteVirtualMailSystemHowto</link>
    and a lot of my own work. You also must have a valid MX record in the DNS
    zone of your domain pointing to the IP address of the server.</para>
  </note>

  <section xml:id="mail-server.dns">
    <title>DNS settings</title>

    <note>
      <para>Mail server in this example is named <systemitem
      class="fqdomainname">atlantis.example.com</systemitem>. You can also
      name it <systemitem class="fqdomainname">mail.example.com</systemitem>
      if you like.</para>
    </note>

    <para>First, we need to check our hostname</para>

    <screen>atlantis:~# <command>hostname -f</command>
atlantis.diabmon.com </screen>

    <para>If hostname did not return FQDN of your server edit
    <filename>/etc/hosts</filename>. You <filename>hosts</filename> file
    should look something like this, if not, change according to your IP
    address and server name.</para>

    <programlisting>127.0.0.1       localhost
YOUR-IP-ADDRESS atlantis.example.com atlantis </programlisting>

    <para>Now check your <filename>/etc/hostname</filename> file it should
    contain your fully qualified domain name:</para>

    <programlisting>atlantis.example.com </programlisting>

    <para>Change the names to match your server name and reboot the server.
    Run <command>hostname -f</command> again and you should see <systemitem
    class="fqdomainname">atlantis.example.com</systemitem>.</para>

    <para>Now, we need to check that our DNS servers have an MX record for our
    <systemitem class="domainname">example.com</systemitem> domain. If you
    haven't done so already Install DNS utilities:</para>

    <programlisting>apt-get install dnsutils</programlisting>

    <para>We are going to use <command>host</command> command to check
    information about our domain:</para>

    <screen>atlantis:~# <command>host</command> example.com
example.com has address YOUR-IP-ADDRESS
example.com mail is handled by 0 mail.example.com. </screen>

    <para>We can see that the mail for our domain is handled by <systemitem
    class="fqdomainname">mail.example.com</systemitem>. Which server is
    supposed to handle mail for your domain is handled by the so called MX
    records in your domains zone file. Setting up DNS zone files is out of
    scope for this document.</para>

    <para>Now we must make sure that <systemitem
    class="fqdomainname">mail.example.com</systemitem> points to the same
    address as our server (<systemitem
    class="fqdomainname">atlantis.example.com</systemitem>).</para>

    <screen>atlantis:~# <command>nslookup</command> mail.example.com
Server: YOUR-DNS-SERVER
Address: YOUR-DNS-ADDRESS#53

Non-authoritative answer:
mail.example.com canonical name = atlantis.example.com.
Name: example.com
Address: YOUR-IP-ADDRESS </screen>

    <para>It would be also nice if your reverse DNS points to the same name
    (<systemitem
    class="fqdomainname">atlantis.example.com</systemitem>).</para>

    <screen>atlantis:~# <command>nslookup</command> YOUR-IP-ADDRESS
Server: YOUR-DNS-SERVER
Address: YOUR-DNS-SERVER#53

Non-authoritative answer: 
YOUR-IP-ADDRES-REVERSE.in-addr.arpa name = atlantis.example.com. </screen>

    <para>If they do not match you will probably have to ask your ISP to
    change this for you.</para>
  </section>

  <section xml:id="postfix">
    <title>Postfix</title>

    <para>The time has finally come to install
    <application>Postfix</application>.</para>

    <programlisting>apt-get install postfix</programlisting>

    <para>During installation Postfix will ask you to choose the type of
    installation and a domain.</para>

    <para>Choose <computeroutput>Internet site</computeroutput> and enter your
    servers name <computeroutput><systemitem
    class="fqdomainname">atlantis.example.com</systemitem></computeroutput>.
    It is important that your server name is not just <systemitem
    class="domainname">example.com</systemitem>.</para>

    <para>After installation finishes we can check if Postfix is runing by
    connecting to port 25 on your localhost with telnet:</para>

    <screen># <command>telnet</command> localhost 25
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 atlantis.example.com ESMTP Postfix (Debian/GNU)</screen>

    <para>Type <command>quit</command> to exit.</para>

    <para>If you see Postfix responding, Postfix is working. For another check
    we can try to send email to one of your email accounts that are located on
    another server:</para>

    <screen xml:id="postfix.test-email-sending">atlantis:~# <command>mail</command> your-other-email@somedomain.com
Subject: test email from example.com
test body of the email.
.
Cc:</screen>

    <para>The single dot on the line is a sign that your are done with the
    emails body.</para>

    <para>You should be getting this email message on the account you
    specified.</para>

    <para>Check that you have your <systemitem
    class="domainname">example.com</systemitem> in a file
    <filename>/etc/mailname</filename>.</para>

    <section xml:id="postfix.inital-settings">
      <title>Initial settings</title>

      <note>
        <para>Do not be afraid to play with config files at this stage. If you
        installed <application>etckeeper</application> <link
        xl:href="#preparation.tracking-changes">as suggested</link>, you can
        always revert to the previous state. Just remember to commit your
        changes every time you change something by running <command>etckeeper
        commit "Descirption of the changes made"</command>. The default
        Postfix configuration files were already commited when we installed
        Postfix.</para>
      </note>

      <para>First we are going to delete the content of the
      <filename>/etc/postfix/main.cf</filename> file so we can fill it with
      our own.</para>

      <programlisting>atlantis:~# <command>cat</command> /dev/null &gt; /etc/postfix/main.cf</programlisting>

      <para>Now copy and paste these lines, but make sure to replace
      <emphasis>myhostname = atlantis.example.com</emphasis> with your
      hostname.</para>

      <screen>##################
# Default settings
##################
biff = no
append_dot_mydomain = no
#delay_warning_time = 4h
readme_directory = no
smtpd_banner = $myhostname ESMTP $mail_name

################
# TLS parameters
################
smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
smtpd_use_tls=yes
smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache

###############
# Main settings
###############
myhostname = <replaceable>atlantis.example.com</replaceable>
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
myorigin = /etc/mailname
mydestination = $mydomain, localhost.$mydomain, localhost
relayhost = 
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
mailbox_size_limit = 0
recipient_delimiter = +
inet_interfaces = all</screen>

      <tip>
        <para>Postfix extracts $mydomain from the value of the
        <varname>myhostname</varname> and strips the part before the first
        dot, including the dot. So in this case <varname>mydomain</varname> is
        <emphasis>example.com</emphasis>.</para>
      </tip>

      <para>If you are not using IPv6 you can remove IPv6 addresses from
      <varname>mynetworks</varname> and leave just <emphasis>mynetworks =
      127.0.0.0/8</emphasis>. We will use the <varname>mynetworks</varname>
      variable to tell Postfix that all computers specified in the my networks
      range can send emails without authentification. We are leaving only the
      localhost here so we make sure that mail originating from the server
      (like outputs of cron jobs and other system messages) do not get blocked
      by other rules we will implement.</para>

      <para>Restart Postfix by running <command>invoke-rc.d postfix
      restart</command> and try to send another test mail to check that we
      didn't mess something up.</para>

      <para>Now it would be a good time to also test if Postfix is receiving
      mails as well. Try sending an email to just <email>root</email> and to
      <email>root@example.com</email> using the <command>mail</command>
      command as described in the <link
      xl:href="#postfix.test-email-sending">previous section</link>. If
      everything works the received emails should be located in
      <filename>/var/mail/root</filename>. Check that file and make sure that
      you are sending email from the right domain (sender should be
      <email>root@example.com</email>). If you do not receive an email check
      the Postifx log file <email>/var/log/mail.log</email> to see what could
      have gone wrong.</para>
    </section>

    <section xml:id="postfix.virtual-users">
      <title>Virtual users and domains</title>

      <para>Our current setup can only receive mail for for users that exist
      on our server (root, the one that you created druing the installation
      and other system users). As you can see this is not quite helpfull as we
      could only server one domain and all the users that have email addresses
      on that domain would have to be created on the server.</para>

      <para>To avoid all this we are going to use virtual domains and users.
      That means that we are going to create a couple of databases where we
      will store all the domains and users that we will be receiving mail
      for.</para>

      <para>First, we are going to create a system user which will have
      persmissions to read and write emails to the system as well as the
      directory for storing all of the mail.</para>

      <para>User will be called <systemitem
      class="username">vmail</systemitem> and will have a group with ID 5000
      on the system.</para>

      <programlisting><command>groupadd</command> -g 5000 vmail
<command>useradd</command> -s /usr/sbin/nologin -g vmail -u 5000 vmail -d /home/vmail -m</programlisting>

      <para>The extra parameters for the <command>useradd</command> command
      tell the system that this user will not be able to log on to the system,
      that he belongs to group 5000 and that it's home folder is <filename
      class="directory">/home/vmail</filename>. This is the folder where all
      of the received messages will be stored.</para>
    </section>

    <section xml:id="postfix.mysql">
      <title>MySQL</title>

      <para>Install MySQL.</para>

      <programlisting>apt-get install postfix-mysql mysql-server</programlisting>

      <para>We are going to use <application>Postfix Admin</application> for
      managing virtual users and domains. Download latest version of Postfix
      Admin and move the content of the archive to
      <filename>/var/www/postfix</filename>.</para>

      <programlisting>cd /root/src
wget LINK-TO-THE-LATEST-VERSION
tar -xvzf postfixadmin-2.3.2.tar.gz
mv postfixadmin-2.3.2 /var/www/postfix</programlisting>

      <para>Before installing Postfix Admin we must create a database and a
      user to access the database.</para>

      <programlisting>mysql -u root</programlisting>

      <para>If you have a password set use the <command>-p</command>
      flag.</para>

      <para>Once in MySQL:</para>

      <programlisting>CREATE DATABASE mail;
CREATE USER 'mailadmin'@'localhost' IDENTIFIED BY '<userinput>newpassword</userinput>';
GRANT ALL PRIVILEGES ON `mail` . * TO 'mailadmin'@'localhost';
FLUSH PRIVILEGES;</programlisting>

      <para>Of course you need to change the
      <userinput>newpassword</userinput> with your own password. You can exit
      MySQL by typing <command>exit</command>.</para>

      <para>Open <filename>/var/www/postfix/config.inc.php</filename> with
      nano. Set <varname>$CONF['configured']</varname> to
      <literal>true</literal>, choose your setup password, set
      <varname>$CONF['postfix_admin_url']</varname> to
      <literal>http://SERVERS-IP-ADDRESS/postfix</literal> and enter your
      database information and credentials.</para>

      <para>While you are at it, you should also go through all of the other
      options you can set in the config mail.</para>

      <para>Open up
      <literal>http://SERVERS-IP-ADDRESS/postfix/setup.php</literal> in your
      browser and finish the installation. Once logged in into the Postfix
      Admin create a new virtual domain <systemitem
      class="domainname">example.com</systemitem>, and create new user accout
      username@example.com. Use your own domain name here.</para>

      <para>Postifx Admin created MySQL tables for us and now it is time to
      tell Postfix to use this tables to get information about email addresses
      and domains it should serve.</para>

      <para>First we need to create 4 files in the <filename
      class="directory">/etc/postfix</filename> folder.</para>

      <para><filename>/etc/postfix/mysql_virtual_alias_maps.cf</filename></para>

      <screen>user = mailadmin
password = newpassword
hosts = 127.0.0.1
dbname = mail
table = alias
select_field = goto
where_field = address</screen>

      <para>/etc/postfix/mysql_virtual_domains_maps.cf</para>

      <screen>user = mailadmin
password = newpassword
hosts = 127.0.0.1
dbname = mail
table = domain
select_field = domain
where_field = domain
additional_conditions = and backupmx = '0' and active = '1'</screen>

      <para><filename>/etc/postfix/mysql_virtual_mailbox_maps.cf
      </filename></para>

      <screen>user = mailadmin
password = newpassword
hosts = 127.0.0.1
dbname = mail
table = mailbox
query = SELECT CONCAT(domain,'/',SUBSTRING_INDEX(maildir,'@',1),'/') FROM mailbox WHERE username='%s' AND active = 1
</screen>

      <para><filename>/etc/postfix/mysql_relay_domains_maps.cf</filename></para>

      <screen>user = mailadmin
password = newpassword
hosts = 127.0.0.1
dbname = mail
table = domain
select_field = domain
where_field = domain
additional_conditions = and backupmx = '1'
</screen>

      <para>As you can see, these files containt information that Postfix uses
      to fetch data from the database.</para>

      <para>Since these files contain passwords, we need to protect
      them:</para>

      <programlisting><prompt>root@atlantis:~#</prompt> <command>cd /etc/postfix</command>
<prompt>atlantis:/etc/postfix#</prompt> <command>chgrp postfix mysql_*.cf</command>
<prompt>atlantis:/etc/postfix#</prompt> <command>chmod 640 mysql_*.cf</command></programlisting>

      <para>Edit <filename>/etc/postfix/main.cf</filename> and at the bottom
      of the file add</para>

      <screen># Virtual Mailbox Domain Settings

virtual_mailbox_base = /home/vmail
virtual_transport = virtual
virtual_alias_maps = mysql:/etc/postfix/mysql_virtual_alias_maps.cf
virtual_mailbox_domains = mysql:/etc/poRestfix/mysql_virtual_domains_maps.cf
virtual_mailbox_maps = mysql:/etc/postfix/mysql_virtual_mailbox_maps.cf
virtual_minimum_uid = 5000
virtual_uid_maps = static:5000
virtual_gid_maps = static:5000

# Domains for which we are a secondary MX
relay_domains = mysql:/etc/postfix/mysql_relay_domains_maps.cfl
</screen>

      <para>You also need to delete everything in the
      <varname>mydestination</varname> directive because every domain that is
      entered in the mydestionation is treated as a “local” domain so the mail
      gets delivered to the local server users and it is located in
      <filename>/var/spool/mail</filename>. </para>

      <para>Restart Postfix.</para>

      <programlisting>invoke-rc.d postfix restart</programlisting>

      <para>Now it's time to check if everything is working as expects. Send a
      test email to the email address you have created using Postfix Admin.
      Check your <filename
      class="directory">/home/vmail/example.com/username</filename> folder.
      There should be 3 folders inside : <filename>cur</filename>,
      <filename>new</filename> and <filename>tmp</filename>. Inside the folder
      <filename>new</filename> you should see your email message. If this
      didn't work, check <filename>/var/log/mail.log</filename> for possible
      hints on what went wrong.</para>

      <note>
        <para>Since our system is now ready to receive email from the outside
        world you can uncomment the line that blocks port 25 in the
        <filename>firewall.sh</filename> script and run the script
        again.</para>
      </note>
      </section>

      <section xml:id="postfix.sasl">
        <title>Saslauthd</title>

        <para>Since we want to allow users to log in to our mail server so
        they can send emails, we need to configure some kind of protection.
        First we need to make sure users can log in using the same username
        and password as the one they will be using for checking email.</para>

        <para>For this, we are going to use
        <application>Saslauthd</application>. Saslauthd will also use the same
        database we already created to verify user credentials. </para>

        <programlisting>apt-get install libsasl2-2 libsasl2-modules libsasl2-modules-sql sasl2-bin libpam-mysql</programlisting>

        <para>Open <filename>/etc/default/saslauthd</filename> with nano and
        change <computeroutput>START=no</computeroutput> to
        <computeroutput>START=yes</computeroutput>. At the end of the file we
        need to change <computeroutput>OPTIONS=”-c -m
        /var/run/saslauthd”</computeroutput> to </para>

        <programlisting>OPTIONS="-c -r -m /var/spool/postfix/var/run/saslauthd"</programlisting>

        <para>We also need to create this directory</para>

        <programlisting>mkdir -p /var/spool/postfix/var/run/saslauthd</programlisting>

        <para>and one symbolic link (because Postfix on Debian is running from
        a chrooted environment and other applications you maybe using on your
        server (including testsaslauthd for testing if saslauthd is working
        correctly) are not aware of us changing the saslauthd directory).
        </para>

        <programlisting>ln -s /var/spool/postfix/var/run/saslauthd /var/run/saslauthd</programlisting>

        <para>We also need to create two more files: </para>

        <programlisting>nano /etc/pam.d/smtp</programlisting>

        <screen>auth    required   pam_mysql.so user=mailadmin passwd=newpassword host=127.0.0.1 db=mail table=mailbox usercolumn=username passwdcolumn=password crypt=1
account sufficient pam_mysql.so user=mailadmin passwd=newpassword host=127.0.0.1 db=mail table=mailbox usercolumn=username passwdcolumn=password crypt=1
</screen>

        <programlisting>nano /etc/postfix/sasl/smtpd.conf</programlisting>

        <screen>pwcheck_method: saslauthd
mech_list: plain login
allow_plaintext: true
auxprop_plugin: mysql
sql_hostnames: 127.0.0.1
sql_user: mailadmin
sql_passwd: newpassword
sql_database: mail
sql_select: select password from mailbox where username = '%u' and active = '1'
</screen>

        <para>We need to add Postfix to the sasl group so it can access the
        saslauthd process we just created:</para>

        <programlisting>adduser postfix sasl</programlisting>

        <para>Restart Postfix and sasl</para>

        <screen>/etc/init.d/postfix restart
/etc/init.d/saslauthd restart</screen>

        <para>Now, we can check is saslauthd is working correctly.</para>

        <programlisting>testsaslauthd -s smtp -u root@example.com -p newpassword</programlisting>

        <para>Ofcourse use your own credentials here. Authentification should
        work.</para>

        <screen>atlantis:~# testsaslauthd -s smtp -u root@example.com -p newpassword
0: OK "Success."</screen>

        <para>If you do not get “Success.” as a response, check that you have
        a symbolic link in <filename>/var/run/</filename> named
        <filename>saslauthd</filename> and that it points to
        <filename>/var/spool/postfix/var/run/saslautdh</filename>.</para>

        <para>We have to change permissions to these two files as well:</para>

        <programlisting>chgrp sasl /etc/pam.d/smtp
chmod 640 /etc/pam.d/smtp
chgrp postfix /etc/postfix/sasl/smtpd.conf
chmod 640 /etc/postfix/sasl/smtpd.conf</programlisting>

        <para>Restart Postfix and sasl.</para>

        <programlisting>/etc/init.d/postfix restart
/etc/init.d/saslauthd restart</programlisting>

        <section>
          <title>TLS</title>

          <para></para>

          <programlisting>apt-get install postfix-tls</programlisting>
    </section>
  </section>
</chapter>
